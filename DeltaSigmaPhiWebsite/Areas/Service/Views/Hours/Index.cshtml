@model DeltaSigmaPhiWebsite.Areas.Service.Models.ServiceHourIndexFilterModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Service Hours";

    var totalMembers = Model.ServiceHours.Count();
    var actives = Model.ServiceHours.Where(m => m.Member.PledgeClass.SemesterId != Model.SelectedSemester).ToList();
    var pledges = Model.ServiceHours.Where(m => m.Member.PledgeClass.SemesterId == Model.SelectedSemester).ToList();

    var membersServed = Model.ServiceHours.Count(m => m.Hours > 0);
    var membersServedPercentage = (int)(100 * (membersServed / (double)totalMembers));
    var membersServedTen = Model.ServiceHours.Count(m => m.Hours >= 10);
    var servedTenPercentage = (int)(100 * (membersServedTen / (double)totalMembers));
    var membersServedFifteen = Model.ServiceHours.Count(m => m.Hours >= 15);
    var servedFifteenPercentage = (int)(100 * (membersServedFifteen / (double)totalMembers));
    var totalMemberHours = Model.ServiceHours.Sum(m => m.Hours);
    var averageMemberHours = (totalMemberHours / totalMembers).ToString("F1");

    var activesServed = actives.Count(m => m.Hours > 0);
    var activesServedPercentage = (int)(100 * (activesServed / (double)(actives.Count == 0 ? 1 : actives.Count)));
    var activesServedTen = actives.Count(m => m.Hours >= 10);
    var activesTenPercentage = (int)(100 * (activesServedTen / (double)(actives.Count == 0 ? 1 : actives.Count)));
    var activesServedFifteen = actives.Count(m => m.Hours >= 15);
    var activesFifteenPercentage = (int)(100 * (activesServedFifteen / (double)(actives.Count == 0 ? 1 : actives.Count)));
    var totalActiveHours = actives.Sum(m => m.Hours);
    var averageActiveHours = (totalActiveHours / (actives.Count == 0 ? 1 : actives.Count)).ToString("F1");

    var pledgesServed = pledges.Count(m => m.Hours > 0);
    var pledgesServedPercentage = (int)(100 * (pledgesServed / (double)(pledges.Count == 0 ? 1 : pledges.Count)));
    var pledgesServedTen = pledges.Count(m => m.Hours >= 10);
    var pledgesTenPercentage = (int)(100 * (pledgesServedTen / (double)(pledges.Count == 0 ? 1 : pledges.Count)));
    var pledgesServedFifteen = pledges.Count(m => m.Hours >= 15);
    var pledgesFifteenPercentage = (int)(100 * (pledgesServedFifteen / (double)(pledges.Count == 0 ? 1 : pledges.Count)));
    var totalPledgeHours = pledges.Sum(m => m.Hours);
    var averagePledgeHours = (totalPledgeHours / (pledges.Count == 0 ? 1 : pledges.Count)).ToString("F1");
}
@section Title
{
    @Html.Partial("_Title")
}

<div class="container">
    <div class="row">
        <div class="col-xs-6">
            @using (Html.BeginForm("Index", "Hours", new { area = "Service" }, FormMethod.Get, new { @class = "form-inline", role = "form" }))
            {
                <div class="form-group">
                    @Html.DropDownListFor(s => s.SelectedSemester, Model.SemesterList, new { @class = "form-control" })

                    <input type="submit" value="Filter" class="btn btn-default" />
                </div>
            }
        </div>
        <div class="col-xs-6 text-right">
            <p>
                @Html.ActionLink("Service Events", "Index", "Events", new { area = "Service" }, new { @class = "btn btn-sm btn-default" })
                @Html.ActionLink("Submit Hours", "Submit", "Hours", new { area = "Service" }, new { @class = "btn btn-sm btn-success" })
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Quick Stats
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>All Members (@totalMembers)</th>
                            <th>Actives (@actives.Count())</th>
                            <th>Pledges (@pledges.Count())</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Total hours:</td>
                            <td>@totalMemberHours</td>
                            <td>@actives.Sum(a => a.Hours)</td>
                            <td>@pledges.Sum(p => p.Hours)</td>
                        </tr>
                        <tr>
                            <td>Members served &gt; 0 hours:</td>
                            <td>@membersServed (@membersServedPercentage %)</td>
                            <td>@activesServed (@activesServedPercentage %)</td>
                            <td>@pledgesServed (@pledgesServedPercentage %)</td>
                        </tr>
                        <tr>
                            <td>Members served &ge; 10 hours:</td>
                            <td>@membersServedTen (@servedTenPercentage %)</td>
                            <td>@activesServedTen (@activesTenPercentage %)</td>
                            <td>@pledgesServedTen (@pledgesTenPercentage %)</td>
                        </tr>
                        <tr>
                            <td>Members served &ge; 15 hours:</td>
                            <td>@membersServedFifteen (@servedFifteenPercentage %)</td>
                            <td>@activesServedFifteen (@activesFifteenPercentage %)</td>
                            <td>@pledgesServedFifteen (@pledgesFifteenPercentage %)</td>
                        </tr>
                        <tr>
                            <td>Service Hours Per Member:</td>
                            <td>@averageMemberHours</td>
                            <td>@averageActiveHours</td>
                            <td>@averagePledgeHours</td>
                        </tr>
                    </tbody>
                </table>
                <div class="panel-footer">
                    <strong>Note: </strong> These numbers are pulled from all current actives, pledges, and neophytes.
                    Sober driving is not counted towards community service hours.
                </div>
            </div>

        </div>
    </div>
    <div class="row">
        <div class="col-sm-12 col-md-8 col-md-offset-2">
            <div class="panel panel-default">
                <div class="panel-heading">
                    @if (Model.ServiceHours.Any())
                    {
                        @: Showing Service Hours for @Model.ServiceHours.First().Semester
                    }
                    <a href="@Url.Action("Download", "Hours", new { id = Model.SelectedSemester })" class="pull-right">
                        <i class="fa fa-download fa-lg"></i>
                    </a>
                </div>
                <div class="panel-body">
                    <table class="table table-condensed">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Hours</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ServiceHours.OrderBy(o => o.Member.LastName))
                            {
                                <tr>
                                    <td>
                                        <strong>@item.Member.LastName, @item.Member.FirstName</strong>
                                    </td>
                                    <td>
                                        <strong>@item.Hours</strong>

                                        <button class="btn btn-xs pull-right" type="button" data-toggle="collapse" data-target=".@item.Member.UserId"
                                                aria-expanded="false" aria-controls="@item.Member.UserId">
                                            Details
                                        </button>
                                    </td>
                                </tr>
                                foreach (var s in item.ServiceHours)
                                {
                                    <tr class="collapse @item.Member.UserId">
                                        <td style="border: none">@s.Event.EventName</td>
                                        <td style="border: none">
                                            @s.DurationHours
                                            @if (User.IsInRole("Administrator") || User.IsInRole("Service"))
                                            {
                                                <div class="pull-right text-right">
                                                    @Html.ActionLink("Edit", "Edit", new { eid = s.EventId, uid = s.UserId }) |
                                                    @Html.ActionLink("Delete", "Delete", new { eid = s.EventId, uid = s.UserId })
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            </tbody>
                            </table>
                        </div>
                <div class="panel-footer">
                    <strong>Note: </strong>
                    These numbers are made up of hours served at events occurring
                    before @Model.Semester.DateEnd.ToShortDateString() and 
                    after @Model.PreviousSemester.DateEnd.ToShortDateString().
                </div>
            </div>
        </div>

    </div>
</div>

@section scripts
{
    <script type="text/javascript">

    </script>
}