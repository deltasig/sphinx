@model DeltaSigmaPhiWebsite.Areas.Study.Models.StudyPeriodInfoModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Study Period";
    ViewBag.Subtitle = Model.Period.Start.ToString("MM/dd/yyyy HH:mm tt") + " to " + Model.Period.End.ToString("MM/dd/yyyy HH:mm tt");
}
@section Title
{
    @Html.Partial("_Title")
}
<div class="container">
    <div class="row">
        <div class="col-xs-6">
            <p>
                <a href="@Url.Action("Index")" class="btn btn-sm btn-default">
                    <i class="fa fa-caret-left"></i> Back to Study Periods
                </a>
            </p>
        </div>
        <div class="col-xs-6 text-right">
            <p>
                <a href="@Url.Action("Edit", new { id = Model.Period.PeriodId })" class="btn btn-sm btn-info">
                    <i class="fa fa-wrench"></i> Edit
                </a>
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Members Given this Assignment
                </div>
                <div class="panel-body">
                    <table class="table table-condensed" id="hours-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Unproctored Hours</th>
                                <th>Proctored Hours</th>
                                @if (User.IsInRole("Administrator") || User.IsInRole("Academics"))
                                {
                                    <th>Fine Amount</th>
                                    <th></th>
                                }
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in Model.Period.Assignments.OrderBy(m => m.AssignedMember.LastName))
                            {
                                var unapprovedUnproctoredTurnIns = item.TurnIns.Where(t => !t.IsProctored && t.DateTimeApproved == null).Sum(t => t.DurationHours);
                                var unapprovedProctoredTurnIns = item.TurnIns.Where(t => t.IsProctored && t.DateTimeApproved == null).Sum(t => t.DurationHours);
                                var approvedUnproctoredTurnIns = item.TurnIns.Where(t => !t.IsProctored && t.DateTimeApproved != null).Sum(t => t.DurationHours);
                                var approvedProctoredTurnIns = item.TurnIns.Where(t => t.IsProctored && t.DateTimeApproved != null).Sum(t => t.DurationHours);
                                var completionPercentage = ((approvedUnproctoredTurnIns + approvedProctoredTurnIns) /
                                                           (item.UnproctoredAmount + item.ProctoredAmount)) * 100.0;

                                <tr>
                                    <td>@item.AssignedMember.ToString()</td>
                                    <td>
                                        @approvedUnproctoredTurnIns/@item.UnproctoredAmount (@unapprovedUnproctoredTurnIns pending)
                                    </td>
                                    <td>
                                        @approvedProctoredTurnIns/@item.ProctoredAmount (@unapprovedProctoredTurnIns pending)
                                    </td>
                                    @if (User.IsInRole("Administrator") || User.IsInRole("Academics"))
                                    {
                                        <td>$
                                             @if (item.UnproctoredAmount + item.ProctoredAmount - approvedUnproctoredTurnIns - approvedProctoredTurnIns <= 0)
                                             {
                                                 @:0
                                             }
                                             else
                                             {
                                                 @((item.UnproctoredAmount + item.ProctoredAmount - approvedUnproctoredTurnIns - approvedProctoredTurnIns) * 5)
                                             }
                                        </td>
                                        <td class="text-right">
                                            @Html.ActionLink("Details", "Details", "Assignments", new { id = item.StudyAssignmentId }, null) | 
                                            @Html.ActionLink("Edit", "Edit", "Assignments", new { id = item.StudyAssignmentId }, null)
                                            @if (!item.TurnIns.Any())
                                            {
                                                @:|
                                                @Html.ActionLink("Unassign", "Unassign", "Assignments", new { id = item.StudyAssignmentId }, null)
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        @if (User.IsInRole("Administrator") || User.IsInRole("Academics"))
        {
            <div class="col-xs-12">
                <hr />
                @using (Html.BeginForm("Assign", "Assignments", FormMethod.Post, new { @class = "", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(m => m.Assignment.StudyAssignmentId)
                    @Html.HiddenFor(m => m.Period.PeriodId)
                    <h4>
                        <strong>Add Members to this Assignment</strong>
                    </h4>

                    <div class="row">
                        <div class="form-group col-xs-12 col-sm-9">
                            @Html.ListBoxFor(model => model.SelectedMemberIds, Model.Members, new { id = "member-selection", @class = "form-control" })
                        </div>
                        <div class="form-group col-xs-12 col-sm-3">
                            @Html.Label("Unproctored Hours", new { @class = "control-label" })
                            @Html.EditorFor(m => m.Assignment.UnproctoredAmount, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Assignment.UnproctoredAmount, "", new { @class = "text-danger" })
                            <br />
                            @Html.Label("Proctored Hours", new { @class = "control-label" })
                            @Html.EditorFor(m => m.Assignment.ProctoredAmount, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.Assignment.ProctoredAmount, "", new { @class = "text-danger" })
                            <br />
                            <input type="submit" value="Submit" class="btn btn-default" />
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>
@section scripts
{
    <script type="text/javascript">
        var settings = {
            selectableHeader: "<label class='control-label'>Members</label><input type='text' class='search-input form-control' autocomplete='off' placeholder='search'>",
            selectionHeader: "<label class='control-label'>Selected Members</label><input type='text' class='search-input form-control' autocomplete='off' placeholder='search'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },
            cssClass: "full-width"
        };

        $('#member-selection').multiSelect(settings);
    </script>
}
