// <auto-generated />
using System;
using Dsp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dsp.Data.Migrations
{
    [DbContext(typeof(DspDbContext))]
    partial class DspDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dsp.Data.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId")
                        .HasName("PK_dbo.Addresses");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CourseShorthand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("ClassId")
                        .HasName("PK_dbo.Classes");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ClassTaken", b =>
                {
                    b.Property<int>("ClassTakenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassTakenId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSummerClass")
                        .HasColumnType("bit");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClassTakenId")
                        .HasName("PK_dbo.ClassesTaken");

                    b.HasIndex("ClassId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("UserId");

                    b.ToTable("ClassesTaken", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId")
                        .HasName("PK_dbo.Departments");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.IncidentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeOfIncident")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTimeSubmitted")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("InvestigationNotes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("OfficialReport")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("PolicyBroken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ShareIdentity")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IncidentReports");

                    b.HasIndex("UserId");

                    b.ToTable("IncidentReports", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.LaundrySignup", b =>
                {
                    b.Property<DateTime>("DateTimeShift")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTimeSignedUp")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DateTimeShift")
                        .HasName("PK_dbo.LaundrySignups");

                    b.HasIndex("UserId");

                    b.ToTable("LaundrySignups", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.Major", b =>
                {
                    b.Property<int>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MajorId")
                        .HasName("PK_dbo.Majors");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Majors", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.MajorToMember", b =>
                {
                    b.Property<int>("MajorToMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorToMemberId"));

                    b.Property<int>("DegreeLevel")
                        .HasColumnType("int");

                    b.Property<int>("MajorId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MajorToMemberId")
                        .HasName("PK_dbo.MajorToMembers");

                    b.HasIndex("MajorId");

                    b.HasIndex("UserId");

                    b.ToTable("MajorToMembers", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Downvotes")
                        .HasColumnType("int");

                    b.Property<bool>("IsGlutenFree")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MealItems");

                    b.ToTable("MealItems", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealItemToPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("MealItemId")
                        .HasColumnType("int");

                    b.Property<int>("MealPeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MealItemsToPeriods");

                    b.HasIndex("MealItemId");

                    b.HasIndex(new[] { "MealPeriodId", "MealItemId", "Date" }, "IX_MealPeriod_MealItem_Date")
                        .IsUnique();

                    b.ToTable("MealItemsToPeriods", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealItemVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("bit");

                    b.Property<int>("MealItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MealItemVotes");

                    b.HasIndex("MealItemId");

                    b.HasIndex(new[] { "UserId", "MealItemId" }, "IX_User_MealItem")
                        .IsUnique();

                    b.ToTable("MealItemVotes", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MealPeriods");

                    b.ToTable("MealPeriods", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealPlate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PlateDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SignedUpOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MealLatePlates");

                    b.HasIndex("UserId");

                    b.ToTable("MealPlates", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.PledgeClass", b =>
                {
                    b.Property<int>("PledgeClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PledgeClassId"));

                    b.Property<DateTime?>("InitiationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PinningDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PledgeClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("PledgeClassId")
                        .HasName("PK_dbo.PledgeClasses");

                    b.HasIndex("SemesterId");

                    b.ToTable("PledgeClasses", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PositionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanBeRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Inquiries")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExecutive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Positions");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("RoomId")
                        .HasName("PK_dbo.Rooms");

                    b.HasIndex("SemesterId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.RoomToMember", b =>
                {
                    b.Property<int>("RoomToMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomToMemberId"));

                    b.Property<DateTime>("MovedIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("MovedOut")
                        .HasColumnType("datetime");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoomToMemberId")
                        .HasName("PK_dbo.RoomToMembers");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomToMembers", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipAnswer", b =>
                {
                    b.Property<int>("ScholarshipAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScholarshipAnswerId"));

                    b.Property<string>("AnswerText")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("ScholarshipQuestionId")
                        .HasColumnType("int");

                    b.Property<Guid>("ScholarshipSubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScholarshipAnswerId")
                        .HasName("PK_dbo.ScholarshipAnswers");

                    b.HasIndex("ScholarshipQuestionId");

                    b.HasIndex("ScholarshipSubmissionId");

                    b.ToTable("ScholarshipAnswers", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipApp", b =>
                {
                    b.Property<int>("ScholarshipAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScholarshipAppId"));

                    b.Property<string>("AdditionalText")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("ClosesOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OpensOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ScholarshipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ScholarshipAppId")
                        .HasName("PK_dbo.ScholarshipApps");

                    b.HasIndex("ScholarshipTypeId");

                    b.ToTable("ScholarshipApps", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipAppQuestion", b =>
                {
                    b.Property<int>("ScholarshipAppQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScholarshipAppQuestionId"));

                    b.Property<int>("FormOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<int>("ScholarshipAppId")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipQuestionId")
                        .HasColumnType("int");

                    b.HasKey("ScholarshipAppQuestionId")
                        .HasName("PK_dbo.ScholarshipAppQuestions");

                    b.HasIndex("ScholarshipAppId");

                    b.HasIndex("ScholarshipQuestionId");

                    b.ToTable("ScholarshipAppQuestions", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipQuestion", b =>
                {
                    b.Property<int>("ScholarshipQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScholarshipQuestionId"));

                    b.Property<int>("AnswerMaximumLength")
                        .HasColumnType("int");

                    b.Property<int>("AnswerMinimumLength")
                        .HasColumnType("int");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ScholarshipQuestionId")
                        .HasName("PK_dbo.ScholarshipQuestions");

                    b.ToTable("ScholarshipQuestions", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipSubmission", b =>
                {
                    b.Property<Guid>("ScholarshipSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("ActSatScore")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CommitteeRespondedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("CommitteeResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Gpa")
                        .HasColumnType("float");

                    b.Property<string>("HearAboutScholarship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HighSchool")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int>("ScholarshipAppId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime");

                    b.HasKey("ScholarshipSubmissionId")
                        .HasName("PK_dbo.ScholarshipSubmissions");

                    b.HasIndex("ScholarshipAppId");

                    b.ToTable("ScholarshipSubmissions", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipType", b =>
                {
                    b.Property<int>("ScholarshipTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScholarshipTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ScholarshipTypeId")
                        .HasName("PK_dbo.ScholarshipTypes");

                    b.ToTable("ScholarshipTypes", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SemesterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<int>("MinimumServiceEvents")
                        .HasColumnType("int");

                    b.Property<int>("MinimumServiceHours")
                        .HasColumnType("int");

                    b.Property<string>("RecruitmentBookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransitionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Semesters");

                    b.ToTable("Semesters", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTimeOccurred")
                        .HasColumnType("datetime");

                    b.Property<double>("DurationHours")
                        .HasColumnType("float");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int?>("SubmitterId")
                        .HasColumnType("int");

                    b.HasKey("EventId")
                        .HasName("PK_dbo.ServiceEvents");

                    b.HasIndex("SubmitterId");

                    b.HasIndex(new[] { "SemesterId" }, "IX_SemesterId");

                    b.ToTable("ServiceEvents", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceEventAmendment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NumberEvents")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceEventAmendments");

                    b.HasIndex("SemesterId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceEventAmendments", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceHour", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeSubmitted")
                        .HasColumnType("datetime");

                    b.Property<double>("DurationHours")
                        .HasColumnType("float");

                    b.HasKey("UserId", "EventId")
                        .HasName("PK_dbo.ServiceHours");

                    b.HasIndex("EventId");

                    b.ToTable("ServiceHours", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceHourAmendment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountHours")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceHourAmendments");

                    b.HasIndex("SemesterId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceHourAmendments", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.SoberSignup", b =>
                {
                    b.Property<int>("SignupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SignupId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfShift")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTimeSignedUp")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SoberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SignupId")
                        .HasName("PK_dbo.SoberSignups");

                    b.HasIndex("SoberTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SoberSignups", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.SoberType", b =>
                {
                    b.Property<int>("SoberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoberTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SoberTypeId")
                        .HasName("PK_dbo.SoberTypes");

                    b.ToTable("SoberTypes", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BigBroId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DietaryInstructions")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmergencyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyRelation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ExpectedGraduationId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PledgeClassId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Members");

                    b.HasIndex("BigBroId");

                    b.HasIndex("ExpectedGraduationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PledgeClassId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("LeaderId");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointedOn")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "RoleId", "SemesterId")
                        .HasName("PK_dbo.Leaders");

                    b.HasIndex("RoleId");

                    b.HasIndex("SemesterId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.UserType", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK_dbo.MemberStatuses");

                    b.ToTable("UserTypes", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderId"));

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Result")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderId")
                        .HasName("PK_dbo.WorkOrders");

                    b.HasIndex("UserId");

                    b.ToTable("WorkOrders", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dsp.Data.Entities.Address", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Addresses_dbo.Members_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Class", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Department", "Department")
                        .WithMany("Classes")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Classes_dbo.Departments_DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ClassTaken", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Class", "Class")
                        .WithMany("ClassesTaken")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClassesTaken_dbo.Classes_ClassId");

                    b.HasOne("Dsp.Data.Entities.Semester", "Semester")
                        .WithMany("ClassesTaken")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClassesTaken_dbo.Semesters_SemesterId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("ClassesTaken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ClassesTaken_dbo.Members_UserId");

                    b.Navigation("Class");

                    b.Navigation("Semester");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.IncidentReport", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("IncidentReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentReports_dbo.Members_ReportedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.LaundrySignup", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("LaundrySignups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LaundrySignups_dbo.Members_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Major", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Department", "Department")
                        .WithMany("Majors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Majors_dbo.Departments_DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Dsp.Data.Entities.MajorToMember", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Major", "Major")
                        .WithMany("MajorToMembers")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MajorToMembers_dbo.Majors_MajorId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("Majors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MajorToMembers_dbo.Members_UserId");

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealItemToPeriod", b =>
                {
                    b.HasOne("Dsp.Data.Entities.MealItem", "MealItem")
                        .WithMany("Periods")
                        .HasForeignKey("MealItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MealItemsToPeriods_dbo.MealItems_MealItemId");

                    b.HasOne("Dsp.Data.Entities.MealPeriod", "MealPeriod")
                        .WithMany("Items")
                        .HasForeignKey("MealPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MealItemsToPeriods_dbo.MealPeriods_MealPeriodId");

                    b.Navigation("MealItem");

                    b.Navigation("MealPeriod");
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealItemVote", b =>
                {
                    b.HasOne("Dsp.Data.Entities.MealItem", "MealItem")
                        .WithMany("Votes")
                        .HasForeignKey("MealItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MealVotes_dbo.MealItems_MealItemId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("MealItemVotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MealVotes_dbo.Members_UserId");

                    b.Navigation("MealItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealPlate", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("MealPlates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MealLatePlates_dbo.Members_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.PledgeClass", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Semester", "Semester")
                        .WithMany("PledgeClasses")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PledgeClasses_dbo.Semesters_SemesterId");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Room", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Semester", "Semester")
                        .WithMany("Rooms")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Rooms_dbo.Semesters_SemesterId");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Dsp.Data.Entities.RoomToMember", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Room", "Room")
                        .WithMany("Members")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoomToMembers_dbo.Rooms_RoomId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RoomToMembers_dbo.Members_UserId");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipAnswer", b =>
                {
                    b.HasOne("Dsp.Data.Entities.ScholarshipQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("ScholarshipQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ScholarshipAnswers_dbo.ScholarshipQuestions_ScholarshipQuestionId");

                    b.HasOne("Dsp.Data.Entities.ScholarshipSubmission", "Submission")
                        .WithMany("Answers")
                        .HasForeignKey("ScholarshipSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ScholarshipAnswers_dbo.ScholarshipSubmissions_ScholarshipSubmissionId");

                    b.Navigation("Question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipApp", b =>
                {
                    b.HasOne("Dsp.Data.Entities.ScholarshipType", "Type")
                        .WithMany("Applications")
                        .HasForeignKey("ScholarshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ScholarshipApps_dbo.ScholarshipTypes_ScholarshipTypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipAppQuestion", b =>
                {
                    b.HasOne("Dsp.Data.Entities.ScholarshipApp", "Application")
                        .WithMany("Questions")
                        .HasForeignKey("ScholarshipAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ScholarshipAppQuestions_dbo.ScholarshipApps_ScholarshipAppId");

                    b.HasOne("Dsp.Data.Entities.ScholarshipQuestion", "Question")
                        .WithMany("Questions")
                        .HasForeignKey("ScholarshipQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ScholarshipAppQuestions_dbo.ScholarshipQuestions_ScholarshipQuestionId");

                    b.Navigation("Application");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipSubmission", b =>
                {
                    b.HasOne("Dsp.Data.Entities.ScholarshipApp", "Application")
                        .WithMany("Submissions")
                        .HasForeignKey("ScholarshipAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ScholarshipSubmissions_dbo.ScholarshipApps_ScholarshipAppId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceEvent", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Semester", "Semester")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceEvents_dbo.Semesters_SemesterId");

                    b.HasOne("Dsp.Data.Entities.User", "Submitter")
                        .WithMany("ServiceEvents")
                        .HasForeignKey("SubmitterId")
                        .HasConstraintName("FK_dbo.Events_dbo.Members_SubmitterId");

                    b.Navigation("Semester");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceEventAmendment", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Semester", "Semester")
                        .WithMany("ServiceEventAmendments")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceEventAmendments_dbo.Semesters_SemesterId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("ServiceEventAmendments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceEventAmendments_dbo.Members_UserId");

                    b.Navigation("Semester");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceHour", b =>
                {
                    b.HasOne("Dsp.Data.Entities.ServiceEvent", "Event")
                        .WithMany("ServiceHours")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceHours_dbo.Events_EventId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("ServiceHours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceHours_dbo.Members_UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceHourAmendment", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Semester", "Semester")
                        .WithMany("ServiceHourAmendments")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceHourAmendments_dbo.Semesters_SemesterId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("ServiceHourAmendments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceHourAmendments_dbo.Members_UserId");

                    b.Navigation("Semester");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.SoberSignup", b =>
                {
                    b.HasOne("Dsp.Data.Entities.SoberType", "SoberType")
                        .WithMany("Signups")
                        .HasForeignKey("SoberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SoberSignups_dbo.SoberTypes_SoberTypeId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("SoberSignups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.SoberSignups_dbo.Members_UserId");

                    b.Navigation("SoberType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.User", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", "BigBro")
                        .WithMany("LittleBros")
                        .HasForeignKey("BigBroId")
                        .HasConstraintName("FK_dbo.Members_dbo.Members_BigBroId");

                    b.HasOne("Dsp.Data.Entities.Semester", "ExpectedGraduation")
                        .WithMany("GraduatingMembers")
                        .HasForeignKey("ExpectedGraduationId")
                        .HasConstraintName("FK_dbo.Members_dbo.Semesters_ExpectedGraduationId");

                    b.HasOne("Dsp.Data.Entities.PledgeClass", "PledgeClass")
                        .WithMany("Users")
                        .HasForeignKey("PledgeClassId")
                        .HasConstraintName("FK_dbo.Members_dbo.PledgeClasses_PledgeClassId");

                    b.HasOne("Dsp.Data.Entities.UserType", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Members_dbo.MemberStatuses_StatusId");

                    b.Navigation("BigBro");

                    b.Navigation("ExpectedGraduation");

                    b.Navigation("PledgeClass");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Dsp.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Leaders_dbo.Members_RoleId");

                    b.HasOne("Dsp.Data.Entities.Semester", "Semester")
                        .WithMany("Leaders")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Leaders_dbo.Semesters_SemesterId");

                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Leaders_dbo.Members_UserId");

                    b.Navigation("Role");

                    b.Navigation("Semester");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dsp.Data.Entities.WorkOrder", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", "User")
                        .WithMany("WorkOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.WorkOrders_dbo.Members_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Dsp.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Dsp.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dsp.Data.Entities.Class", b =>
                {
                    b.Navigation("ClassesTaken");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Department", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Majors");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Major", b =>
                {
                    b.Navigation("MajorToMembers");
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealItem", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Dsp.Data.Entities.MealPeriod", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Dsp.Data.Entities.PledgeClass", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Room", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipApp", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipSubmission", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ScholarshipType", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Dsp.Data.Entities.Semester", b =>
                {
                    b.Navigation("ClassesTaken");

                    b.Navigation("GraduatingMembers");

                    b.Navigation("Leaders");

                    b.Navigation("PledgeClasses");

                    b.Navigation("Rooms");

                    b.Navigation("ServiceEventAmendments");

                    b.Navigation("ServiceEvents");

                    b.Navigation("ServiceHourAmendments");
                });

            modelBuilder.Entity("Dsp.Data.Entities.ServiceEvent", b =>
                {
                    b.Navigation("ServiceHours");
                });

            modelBuilder.Entity("Dsp.Data.Entities.SoberType", b =>
                {
                    b.Navigation("Signups");
                });

            modelBuilder.Entity("Dsp.Data.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ClassesTaken");

                    b.Navigation("IncidentReports");

                    b.Navigation("LaundrySignups");

                    b.Navigation("LittleBros");

                    b.Navigation("Majors");

                    b.Navigation("MealItemVotes");

                    b.Navigation("MealPlates");

                    b.Navigation("Roles");

                    b.Navigation("Rooms");

                    b.Navigation("ServiceEventAmendments");

                    b.Navigation("ServiceEvents");

                    b.Navigation("ServiceHourAmendments");

                    b.Navigation("ServiceHours");

                    b.Navigation("SoberSignups");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Dsp.Data.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
