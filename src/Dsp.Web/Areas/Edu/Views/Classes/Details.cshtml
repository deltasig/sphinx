@using Dsp.Web.Areas.Edu.Models
@using Dsp.Data.Entities
@using Microsoft.AspNet.Identity
@using System.Web.Configuration
@model ClassDetailsModel
@{
    Layout = "~/Views/Shared/_LayoutInternal.cshtml";
    ViewBag.Title = Model.Class.CourseName;
    ViewBag.Subtitle = Model.Class.CourseShorthand;
    var cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
    var hasElevatedPermissions = User.IsInRole("Administrator") || User.IsInRole("Academics");

    var enrollModel = new ClassScheduleModel
    {
        SelectedUserName = User.Identity.GetUserName(),
        ClassTaken = new ClassTaken
        {
            UserId = User.Identity.GetUserId<int>(),
            ClassId = Model.Class.ClassId,
            SemesterId = Model.CurrentSemester.SemesterId
        }
    };

    var section = WebConfigurationManager.GetSection("system.web/httpRuntime") as HttpRuntimeSection;
    var maxKB = section != null ? section.MaxRequestLength : 10240; // KB
    var maxMB = maxKB / 1024; // MB
}

<div class="container-fluid">
    <div class="row row-space">
        <div class="col-lg-6">
            <a href="@Url.Action("Index")" class="btn btn-sm btn-default">
                <i class="fa fa-caret-left"></i> Back to Classes
            </a>
            <hr class="hidden-lg"/>
        </div>
        <div class="col-lg-6 text-right">
            @using (Html.BeginForm("Enroll", "Classes"))
            {
                if (!Model.Class.ClassesTaken.Any(c =>
                    c.UserId == User.Identity.GetUserId<int>() && c.SemesterId == Model.CurrentSemester.SemesterId))
                {
                    @Html.AntiForgeryToken()
                    <input id="SelectedUserName" name="SelectedUserName" type="hidden" value="@enrollModel.SelectedUserName">
                    <input id="ClassTaken_UserId" name="ClassTaken.UserId" type="hidden" value="@enrollModel.ClassTaken.UserId">
                    <input id="ClassTaken_ClassId" name="ClassTaken.ClassId" type="hidden" value="@enrollModel.ClassTaken.ClassId">
                    <input id="ClassTaken_SemesterId" name="ClassTaken.SemesterId" type="hidden" value="@enrollModel.ClassTaken.SemesterId">
                    <button type="submit" class="btn btn-default btn-sm">
                        <i class="fa fa-plus"></i> Add to my @Model.CurrentSemester schedule
                    </button>
                }

                <a href="@Url.Action("Details", "Departments", new {id = Model.Class.Department.DepartmentId})" class="btn btn-sm btn-default">
                    @Model.Class.Department.Name Department
                </a>

                <a href="@Url.Action("Edit", new {id = Model.Class.ClassId})" class="btn btn-sm btn-info">
                    <i class="fa fa-cog"></i> Edit
                </a>
                if (hasElevatedPermissions)
                {
                    if (!Model.Class.ClassesTaken.Any())
                    {
                        <a href="@Url.Action("Delete", new {id = Model.Class.ClassId})" class="btn btn-sm btn-danger">
                            <i class="fa fa-times"></i> Delete
                        </a>
                    }
                }
            }
            <hr class="hidden-lg"/>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-users"></i>
                    Members who are or were enrolled in @Model.Class.CourseShorthand
                </div>
                <div class="table-responsive">
                    <table class="table table-condensed table-hover">
                        <thead>
                            <tr class="active">
                                <th class="col-xs-6"><small>Member</small></th>
                                <th><small>Semester</small></th>
                                @if (hasElevatedPermissions)
                                {
                                    <th class="col-xs-2"></th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Class.ClassesTaken.Any())
                            {
                                foreach (var s in Model.Class.ClassesTaken
                                    .OrderByDescending(c => c.Semester.DateEnd).ThenBy(c => c.Member.LastName))
                                {
                                    <tr class="@(s.SemesterId == Model.CurrentSemester.SemesterId ? "success" : "")">
                                        <td>
                                            <a href="@Url.Action("Schedule", new {userName = s.Member.UserName})">
                                                @(s.Member.FirstName + " " + s.Member.LastName)
                                            </a>
                                        </td>
                                        <td>@s.Semester</td>
                                        @if (hasElevatedPermissions)
                                        {
                                            var enrollmentInfo = new { uid = s.UserId, cid = s.ClassId, sid = s.SemesterId };
                                            <td class="text-right">
                                                <small>
                                                    <a href="@Url.Action("EditEnrollment", enrollmentInfo)">Edit</a> |
                                                    <a href="@Url.Action("Disenroll", enrollmentInfo)">Delete</a>
                                                </small>
                                            </td>
                                        }
                                    </tr>
                                }
                            }
                            else
                            {
                                var columns = hasElevatedPermissions ? 3 : 2;

                                <tr class="warning">
                                    <td colspan="@(columns)">No one has taken this class yet</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="panel-footer">Count: @Model.Class.ClassesTaken.Count</div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-folder-open"></i> <strong>Files</strong>
                </div>
                <ul class="list-group">
                    @if (Model.Class.ClassFiles.Any())
                    {
                        foreach (var f in Model.Class.ClassFiles.OrderBy(c => c.AwsCode.Split('/')[1]))
                        {
                            <li class="list-group-item">
                                <div class="row">
                                    <div class="col-xs-12">
                                        <small>
                                            @f.AwsCode.Split('/')[1]
                                            <i data-toggle="tooltip" data-placement="top"
                                               title="Uploaded by @f.Uploader on @TimeZoneInfo.ConvertTimeFromUtc(f.UploadedOn, cstZone).  Downloaded @f.DownloadCount time(s)."
                                               class="fa fa-info-circle fa-lg text-info"></i>
                                        </small>
                                        <small class="pull-right">
                                            <a href="@Url.Action("DownloadFile", new {id = f.ClassFileId})" class="btn btn-xs btn-default">
                                                Download
                                            </a>
                                            @if (hasElevatedPermissions)
                                            {
                                                @:
                                                <a href="@Url.Action("DeleteFile", new { id = f.ClassFileId })" class="btn btn-xs btn-danger">
                                                    Delete
                                                </a>
                                            }
                                        </small>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item list-group-item-warning">
                            No files uploaded yet for this class.
                        </li>
                    }
                </ul>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-cloud-upload"></i> <strong>Upload a New File</strong>
                    <a href="@Url.Action("Uploading")"
                       class="btn btn-xs btn-info pull-right">
                        <i class="fa fa-info-circle"></i> Instructions
                    </a>
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm("UploadFile", "Classes", FormMethod.Post, new { enctype = "multipart/form-data", role = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.HiddenFor(m => Model.Class.ClassId)
                        @Html.HiddenFor(m => Model.Class.CourseName)
                        @Html.HiddenFor(m => Model.Class.CourseShorthand)

                        <div class="form-group">
                            <input type="file" 
                                   name="FileInfoModel.File" id="FileInfoModel_File" data-val="true" />
                            <p class="help-block">PDF files only; max size is @(maxMB)MB.</p>
                        </div>
                        <input type="submit" value="Upload" class="btn btn-sm btn-default" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>