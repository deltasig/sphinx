@model Dsp.Web.Areas.Scholarships.Models.CreateScholarshipAppModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Create Scholarship Application";
}
@section styles {
    @Styles.Render("~/content/datetimepicker")
    @Styles.Render("~/content/markdown")
}

<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12">
            <p>
                <a href="@Url.Action("Index")" class="btn btn-sm btn-default">
                    <i class="fa fa-caret-left"></i> Back to Scholarships
                </a>
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})

                <div class="row">
                    <div class="form-group col-md-6 col-lg-4">
                        @Html.Label("Title", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Application.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Application.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-md-6 col-lg-4">
                        @Html.Label("Type", htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.Application.ScholarshipTypeId, Model.Types, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Application.Type, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="checkbox form-group col-md-6 col-lg-4" style="margin-top:0">
                        <label class="control-label">
                            @Html.EditorFor(model => model.Application.IsPublic)
                            Make Public?
                            <i class="fa fa-info-circle text-info" data-toggle="tooltip" data-placement="top"
                               title="This will make the application accessible from the external portion of the website."></i>
                        </label>
                    </div>
                </div>

                <hr />

                <div class="row">
                    <div class="form-group col-md-6 col-lg-4">
                        @Html.Label("Application Submission Period Begins On", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group date" id="dtp1">
                            @Html.EditorFor(m => m.Application.OpensOn, new { htmlAttributes = new { @class = "form-control", type = "datetime", @Value = DateTime.UtcNow.ToShortDateString() } })
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.Application.OpensOn, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-md-6 col-lg-4">
                        @Html.Label("Application Submission Period Ends On", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group date" id="dtp2">
                            @Html.EditorFor(m => m.Application.ClosesOn, new { htmlAttributes = new { @class = "form-control", type = "datetime", @Value = DateTime.UtcNow.ToShortDateString() } })
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.Application.ClosesOn, "", new { @class = "text-danger" })
                    </div>
                </div>

                <hr />

                <div class="row">
                    <div class="form-group col-xs-12">
                        @Html.Label("Additional Text (instructions and any other details)", new { @class = "control-label" })
                        <div class="wmd-panel">
                            <div id="wmd-button-bar"></div>
                            @Html.EditorFor(model => model.Application.AdditionalText, new { htmlAttributes = new { @class = "form-control wmd-input", rows = 10, id = "wmd-input" } })
                        </div>
                        <div class="wmd-panel wmd-preview well well-sm" id="wmd-preview"></div>
                        @Html.ValidationMessageFor(model => model.Application.AdditionalText, "", new { @class = "text-danger" })
                    </div>
                </div>

                <h3>Scholarship Questions</h3>
                <table class="table table-hover">
                    <thead>
                    <tr>
                        <th>Select</th>
                        <th>Question</th>
                        <th>Optional</th>
                        <th>Form Order</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (var i = 0; i < Model.Questions.Count(); i++)
                    {
                        @Html.HiddenFor(m => Model.Questions[i].Question.ScholarshipQuestionId)
                        <tr>
                            <td class="col-md-1">
                                @Html.EditorFor(model => Model.Questions[i].IsSelected, new {htmlAttributes = new {@class = ""}})
                            </td>
                            <td class="col-md-8">
                                @Model.Questions[i].Question.Question.Prompt
                            </td>
                            <td class="col-md-1">
                                @Html.EditorFor(model => Model.Questions[i].Question.IsOptional, new {htmlAttributes = new {@class = ""}})
                            </td>
                            <td class="col-xs-2 col-md-1">
                                @Html.EditorFor(model => Model.Questions[i].Question.FormOrder, new {htmlAttributes = new {@class = "form-control"}})
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4 col-lg-2 col-lg-offset-5">
                        <input type="submit" value="Create" class="btn btn-lg btn-success btn-block"/>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/datetimepicker")
    @Scripts.Render("~/bundles/markdown")
    <script type="text/javascript">

        $(function () {
            $("#dtp1").datetimepicker({
                format: "MM/DD/YYYY"
            });
            $("#dtp2").datetimepicker({
                format: "MM/DD/YYYY"
            });

            var converter = Markdown.getSanitizingConverter();
            var editor = new Markdown.Editor(converter);
            editor.run();
        });

    </script>
}
