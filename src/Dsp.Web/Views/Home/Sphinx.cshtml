@model SphinxModel
@{
    Layout = "~/Views/Shared/_LayoutInternal.cshtml";
    ViewBag.Title = "Sphinx";
    ViewBag.Subtitle = Model.CurrentSemester.ToString();
    var cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
    var nowCst = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, cstZone);

    // Permissions
    var isAdmin = User.IsInRole("Administrator");
    var isAlumnus = User.IsInRole("Alumnus");
    var isActive = User.IsInRole("Active");
    var isNew = User.IsInRole("New");
    var isNeophyte = User.IsInRole("Neophyte");
    var isUndergrad = isNeophyte || isNew || isActive;
    var isAffiliate = User.IsInRole("Affiliate");
    
    // Laundry-related
    var laundry = Model.LaundrySummary.OrderBy(o => o.DateTimeShift);

    // Class-related
    var lastSemesterClasses = Model.MemberInfo.ClassesTaken.Where(c => c.SemesterId == Model.PreviousSemester.Id).ToList();
    var thisSemesterClasses = Model.MemberInfo.ClassesTaken.Where(c => c.SemesterId == Model.CurrentSemester.Id).ToList();

    // Service-related
    var approvedHours = 0.0;
    var unapprovedHours = 0.0;
    if (Model.CompletedEvents.Any())
    {
        approvedHours = Model.CompletedEvents.Where(e => e.Event.IsApproved).Sum(h => h.DurationHours);
        unapprovedHours = Model.CompletedEvents.Where(e => !e.Event.IsApproved).Sum(h => h.DurationHours);
    }
    var hourAmendments = Model.MemberInfo.ServiceHourAmendments.Where(a => a.SemesterId == Model.CurrentSemester.Id);
    var eventAmendments = Model.MemberInfo.ServiceEventAmendments.Where(a => a.SemesterId == Model.CurrentSemester.Id);
    var totalHourAmendment = hourAmendments.Sum(a => a.AmountHours);
    var totalEventAmendment = eventAmendments.Sum(a => a.NumberEvents);
    var hoursGoal = Model.CurrentSemester.MinimumServiceHours + totalHourAmendment;
    var eventGoal = Model.CurrentSemester.MinimumServiceEvents + totalEventAmendment;
    var approvedPercentage = (approvedHours) * 100.0;
    if (!hoursGoal.Equals(0))
    {
        approvedPercentage /= hoursGoal;
    }
    var unapprovedPercentage = (unapprovedHours) * 100.0;
    if (!hoursGoal.Equals(0))
    {
        unapprovedPercentage /= hoursGoal;
    }
    var barColor = approvedPercentage < 25 ? "danger" : approvedPercentage >= 100 ? "success" : "warning";
    var approvedWidth = approvedPercentage > 100 ? 100 : approvedPercentage;
    var unapprovedWidth = unapprovedPercentage + approvedPercentage > 100 ? 100 - approvedPercentage : unapprovedPercentage;

    // Notifications
    var notifications = new List<Notification>();
    if (Model.NeedsToSoberDrive && isUndergrad)
    {
        notifications.Add(new Notification
        {
            Message = "Sign up to sober drive at least once.",
            LinkText = "Go to Schedule",
            Link = Url.Action("Index", "Schedule", new { area = "Sobers" }),
            Why = "With people like Luckert, it is true that not everyone needs to sign up - see the report. " +
                  "Signing up spreads the work though, helping brothers, reducing risk, and spreading the Taco Bell. ",
            Priority = NotificationPriority.Moderate
        });
    }
    if (Model.MemberInfo.Addresses.Any(a => a.Type == "Mailing" && !a.IsFilledOut()))
    {
        notifications.Add(new Notification
        {
            Message = "Add a mailing address.",
            LinkText = "Go to Account",
            Link = Url.Action("Index", "Account", new { area = "Members" }),
            Why = "This is mainly for recordkeeping purposes so that we know where to mail things.",
            Priority = NotificationPriority.Low
        });
    }
    if (Model.MemberInfo.PhoneNumbers.Any(a => a.Type == "Mobile" && string.IsNullOrEmpty(a.Number)))
    {
        notifications.Add(new Notification
        {
            Message = "Add a mobile phone number.",
            LinkText = "Go to Account",
            Link = Url.Action("Index", "Account", new { area = "Members" }),
            Why = "This is mainly for recordkeeping as well as having a number to call for sober driving.",
            Priority = NotificationPriority.Moderate
        });
    }
    if (!thisSemesterClasses.Any() && isUndergrad)
    {
        notifications.Add(new Notification
        {
            Message = "Report upcoming or current semester courses.",
            LinkText = "Go to Class Schedule",
            Link = Url.Action("Schedule", "Classes", new { userName = Model.MemberInfo.UserName, area = "Edu" }),
            Why = "This is how you are held accountable to academic standards. " +
                  "The academic chairman will contact you about this if you wait too long.",
            Priority = NotificationPriority.High
        });
    }
    if (!Model.MemberInfo.MajorsToMember.Any())
    {
        notifications.Add(new Notification
        {
            Message = "Report your major(s).",
            LinkText = "Go to Account",
            Link = Url.Action("Index", "Account", new { area = "Members" }),
            Why = "This is just for recordkeeping purposes so we can show what majors make up the fraternity over time.",
            Priority = NotificationPriority.Moderate
        });
    }
    if (string.IsNullOrEmpty(Model.MemberInfo.AvatarPath))
    {
        notifications.Add(new Notification
        {
            Message = "Upload a profile picture!",
            LinkText = "Go to Profile",
            Link = Url.Action("Edit", "Account", new { userName = Model.MemberInfo.UserName, area = "Members" }),
            Why = "Use your composite photo if you have it.",
            Priority = NotificationPriority.Moderate
        });
    }
}
@Scripts.Render("~/bundles/moment")
@Scripts.Render("~/bundles/mustache")
@Scripts.Render("~/bundles/clipboard")

<div class="container-fluid">
    @if (isActive || isNew || isNeophyte || isAlumnus)
    {
        <div class="row">
            <div class="col-lg-9 col-md-8">
                <div class="row">
                    <div class="col-lg-5">
                        @if (notifications.Any())
                        {
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <i class="fa fa-fw fa-exclamation-circle"></i> Notifications
                                </div>
                                <div class="list-group">
                                    @foreach (var n in notifications.OrderByDescending(o => o.Priority))
                                    {
                                        var color = n.Priority == NotificationPriority.High
                                            ? "list-group-item-danger"
                                            : n.Priority == NotificationPriority.Moderate
                                                ? "list-group-item-warning"
                                                : "";

                                        <div class="list-group-item @color">
                                            <a href="@n.Link" class="btn btn-xs btn-default"
                                               data-toggle="tooltip" data-placement="right" title="@n.Why">
                                                <i class="fa fa-fw fa-pencil-square-o"></i>
                                            </a>
                                            <small>@n.Message</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        <ul class="nav nav-tabs nav-justified" role="tablist">
                            <li class="active">
                                <a href="#sober-signups" data-toggle="pill">
                                    <i class="fa fa-fw fa-car"></i> Sobers
                                </a>
                            </li>
                            <li>
                                <a href="#upcoming-socials" data-toggle="pill">
                                    <i class="fa fa-fw fa-calendar"></i> Socials <span id="social-count" class="badge">0</span>
                                </a>
                            </li>
                        </ul>
                        <div class="tab-content panel">
                            <div class="tab-pane active" id="sober-signups">
                                <div class="panel panel-default">
                                    @Html.Partial("~/Areas/Sobers/Views/Schedule/_SoberSchedulePartial.cshtml", Model.SoberSignups)
                                </div>
                            </div>
                            <div class="tab-pane" id="upcoming-socials">
                                <div class="panel panel-default">
                                    <div class="list-group" id="socials">
                                        <div class="list-group-item list-group-item-warning" id="no-socials">
                                            No socials posted yet!
                                            @if (User.IsInRole("Social"))
                                            {
                                                <br />
                                                <i class="fa fa-exclamation-triangle"></i>
                                                <span>
                                                    Make sure that [SOCIAL] is added to the event's description field,
                                                    brackets included.
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (isUndergrad || isAdmin)
                        {
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <i class="fa fa-fw fa-tint"></i>
                                    Laundry Status
                                </div>
                                <div class="list-group">
                                    @if (laundry.Any())
                                    {
                                        var minutesTil = (int) (laundry.First().DateTimeShift - nowCst).TotalMinutes;
                                        var hoursTil = (int) minutesTil / 60;

                                        if (minutesTil <= 0)
                                        {
                                            <div class="list-group-item list-group-item-danger">
                                                <small>
                                                    <i class="fa fa-ban"></i>
                                                    Laundry room is currently reserved.
                                                </small>
                                            </div>
                                        }
                                        else if (minutesTil < 120)
                                        {
                                            <div class="list-group-item list-group-item-warning">
                                                <small>
                                                    <i class="fa fa-ban"></i>
                                                    Someone will be using the room in @minutesTil minutes.
                                                </small>
                                            </div>
                                        }
                                        else if (minutesTil >= 120)
                                        {
                                            <div class="list-group-item list-group-item-success">
                                                <small>
                                                    <i class="fa fa-exclamation-circle"></i>
                                                    Laundry room is available for the next @hoursTil hours.
                                                </small>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="list-group-item list-group-item-success">
                                            <small>
                                                <i class="fa fa-exclamation-circle"></i>
                                                Laundry room is completely available.
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @if (!lastSemesterClasses.Any() && Model.MemberInfo.PledgeClass.SemesterId == Model.CurrentSemester.Id)
                        {
                            <div class="alert alert-warning">
                                <strong>New Member: </strong>You do not appear to have classes entered for @Model.PreviousSemester.ToString().

                                <small>
                                    <i class="fa fa-exclamation-triangle"></i>
                                    If this is your first semester in college after graduating high school, disregard this message.
                                </small>

                                Otherwise, please go fill out your classes for last semester with the
                                @Html.ActionLink("Classes", "Schedule", "Classes", new {userName = Model.MemberInfo.UserName, area = "Edu"}, null).

                                If you transferred here from another college you attended after graduating high school,
                                you still need to enter your previous semester classes.
                            </div>
                        }
                    </div>
                    <div class="col-lg-7">
                        <div class="panel panel-default">
                            <div class="panel-heading"><i class="fa fa-fw fa-home"></i> Chapter Status</div>
                            <div class="panel-body">
                                <dl class="dl-horizontal">
                                    <dt><i class="fa fa-fw fa-users"></i> New Members</dt>
                                    <dd>@Model.NewMembersThisSemester.ToString("00") <small>this semester</small></dd>
                                    <dt><i class="fa fa-fw fa-globe"></i> Total Service</dt>
                                    <dd>@Model.ServiceHoursThisSemester.ToString("0000") <small>hours this semester</small></dd>
                                    <dt><i class="fa fa-fw fa-graduation-cap"></i>Scholarship Apps</dt>
                                    <dd>@Model.ScholarshipSubmissionsThisYear.ToString("00") <small>this year</small></dd>
                                    <dt><i class="fa fa-fw fa-exclamation-triangle"></i> Incidents</dt>
                                    <dd>@Model.IncidentsThisSemester.ToString("00") <small>this semester</small></dd>
                                    <dt><i class="fa fa-fw fa-exclamation-triangle"></i>Last Incident</dt>
                                    <dd>@Model.DaysSinceIncident.ToString("000") <small>days ago</small></dd>
                                    <dt><i class="fa fa-fw fa-tint"></i>Laundry</dt>
                                    <dd>@((Model.LaundryUsageThisSemester * 2).ToString("0000")) <small>hours this semester</small></dd>
                                </dl>
                            </div>
                        </div>
                        <!-- SERVICE HOURS -->
                        @if (isUndergrad ||  isAdmin)
                        {
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <i class="fa fa-fw fa-globe"></i>
                                    My Service Progress
                                    <small class="pull-right">
                                        <a href="@Url.Action("Submit", "Hours", new {area = "Service"})"
                                           class="">
                                            <i class="fa fa-lg fa-plus-circle" data-toggle="tooltip" data-placement="top"
                                               title="Submit Hours"></i>
                                        </a> |
                                        <a href="@Url.Action("Index", "Events", new {area = "Service"})"
                                           class="">
                                            <i class="fa fa-lg fa-list" data-toggle="tooltip" data-placement="top"
                                               title="Event List"></i>
                                        </a>
                                    </small>
                                </div>
                                @if (hoursGoal > 0)
                                {
                                    <div class="panel-body">
                                        <div class="progress" style="margin: 0">
                                            <div class="progress-bar progress-bar-striped progress-bar-@barColor" role="progressbar"
                                                 aria-valuenow="@(approvedHours)" aria-valuemin="0"
                                                 aria-valuemax="@(hoursGoal)" style="width: @(approvedWidth)%;">
                                                @Math.Round(approvedPercentage, 2)%
                                            </div>
                                            @if (approvedHours < hoursGoal && unapprovedHours > 0)
                                            {
                                                <div class="progress-bar progress-bar-striped progress-bar-info" role="progressbar"
                                                     aria-valuenow="@(unapprovedHours)" aria-valuemin="0"
                                                     aria-valuemax="@(hoursGoal)" style="width: @(unapprovedWidth)%;">
                                                    @Math.Round(unapprovedPercentage, 2)%
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                <div class="table-responsive">
                                    <table class="table table-condensed table-bordered table-hover">
                                        <thead>
                                            @if (hoursGoal <= 0)
                                            {
                                                <tr class="info">
                                                    <th colspan="4">
                                                        <small>
                                                            <i class="fa fa-info-circle"></i> You have been exempted from service hours this semester.
                                                        </small>
                                                    </th>
                                                </tr>
                                            }
                                            <tr class="active">
                                                <th><small>Event</small></th>
                                                <th class="col-sm-2"><small>Date</small></th>
                                                <th class="col-sm-1">
                                                    <i class="fa fa-check-circle" data-toggle="tooltip" data-placement="top"
                                                       title="Approved: hours submitted for events not yet approved by the Service Chairman do not count
                                                              towards the semester minimum requirement."></i>
                                                </th>
                                                <th class="col-sm-1"><small>Hours</small></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (!Model.CompletedEvents.Any())
                                            {
                                                <tr class="warning">
                                                    <td colspan="4" class="text-center"><small>No service hours submitted yet.</small></td>
                                                </tr>
                                            }
                                            else
                                            {
                                                foreach (var item in Model.CompletedEvents.OrderBy(e => e.Event.DateTimeOccurred))
                                                {
                                                    var attendedPercentage = (int)((item.DurationHours / item.Event.DurationHours) * 100.0);

                                                    <tr type="button" data-toggle="collapse" data-target=".@item.EventId"
                                                        aria-expanded="false" aria-controls="@item.EventId">
                                                        <td>@item.Event.EventName</td>
                                                        <td>@item.Event.DateTimeOccurred.ToShortDateString()</td>
                                                        <td>@Html.DisplayFor(modelItem => item.Event.IsApproved)</td>
                                                        <td>@item.DurationHours</td>
                                                    </tr>
                                                    <tr class="collapse @item.EventId">
                                                        <td colspan="3">
                                                            <div class="progress" style="margin: 0"
                                                                 data-toggle="tooltip" data-placement="left"
                                                                 title="Attended event for @item.DurationHours of the possible @item.Event.DurationHours hour(s)">
                                                                <div class="progress-bar progress-bar-info" role="progressbar" aria-valuemin="0"
                                                                     aria-valuenow="@(item.DurationHours)" aria-valuemax="@(item.Event.DurationHours)"
                                                                     style="width: @(attendedPercentage > 100 ? 100 : attendedPercentage)%;">
                                                                    @attendedPercentage%
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td></td>
                                                    </tr>
                                                }
                                                <tr>
                                                    <td class="text-right" colspan="3"><small>Total:</small></td>
                                                    <td>
                                                        @(approvedHours + unapprovedHours)
                                                        @if (unapprovedHours > 0)
                                                        {
                                                            <small>
                                                                <i class="fa fa-exclamation-triangle text-warning" data-toggle="tooltip" data-placement="top"
                                                                   title="@unapprovedHours of these hours @((int)unapprovedHours == 1 ? "is" : "are") unapproved."></i>
                                                            </small>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="panel-footer">
                                    <small>Minimum Hours Required: <strong>@hoursGoal hours</strong></small><br />
                                    <small>Event Attendance: <strong>@Model.CompletedEvents.Count()/@eventGoal events</strong></small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-4">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <i class="fa fa-fw fa-newspaper-o"></i> Feed
                    </div>
                    <ul class="list-group" style="max-height: 650px; overflow-y: scroll">
                        <li class="list-group-item" id="feed-loading">
                            <i class="fa fa-spinner fa-spin"></i>
                        </li>
                        <li class="list-group-item" id="no-feed-results">
                            Nothing found.
                        </li>
                        <li class="list-group-item text-center">
                            <button type="button" class="btn btn-xs btn-link" id="feed-load-btn">
                                Load More
                            </button>
                            <p class="subtext">
                                <small id="feed-pages"></small>
                            </p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    }
    else if (isAffiliate)
    {
        <p>Affiliate content is forthcoming.</p>
    }
</div>

<script id="social-template" type="text/x-custom-template">
    <div class="list-group-item {{status}} {{color}}">
        <strong>{{summary}}</strong><br />
        {{#location}}
        <small>
            <i class="fa fa-fw fa-map-marker"></i>
            {{location}}
        </small><br />
        {{/location}}
        <small>
            <i class="fa fa-fw fa-clock-o"></i>
            {{datetime}}
        </small>
    </div>
</script>
<script id="feed-template" type="x-template-mustache">
    <li class="list-group-item">
        <div class="media">
            <div class="media-left">
                <a href="{{link}}">
                    <img src="/Images/Avatars/{{imageName}}" height="25" width="25" class="img-circle" alt="{{userName}}" />
                </a>
            </div>
            <div class="media-body">
                <p class="subtext">
                    <a href="{{link}}"><i class="fa fa-fw {{symbol}}"></i></a>
                    {{#userName}}
                    <a href="/members/account/index?userName={{userName}}">{{name}}</a>
                    {{/userName}}
                    {{^userName}}
                        {{#name}}
                        {{name}}
                        {{/name}}
                    {{/userName}}
                    {{timeSince}}
                </p>
                <small>
                    {{displayText}}
                </small>
            </div>
        </div>
    </li>
</script>

@section scripts
{
    <script type="text/javascript">

        var loadMoreFeedItems = function() {
            this.page = (typeof this.page !== "undefined") ? this.page : 0;
            var parent = this;
            $("#feed-loading").show();
            $.ajax({
                url: `/api/members/feed/${this.page}`,
                success: function(data) {
                    $("#no-feed-results").hide();
                    var template = document.getElementById('feed-template').innerHTML;
                    Mustache.parse(template);
                    for (var i = 0; i < data.length; i++) {
                        var rendered = Mustache.render(template, data[i]);
                        $("#feed-loading").before(rendered);
                    }
                    parent.page++;
                    if (parent.page >= 10) {
                        $("#feed-load-btn").hide();
                        $("#feed-pages").text("Maximum feed length reached.");
                    } else {
                        $("#feed-pages").text("retrieved " + parent.page + " page(s)");
                    }
                },
                error: function(response) {
                    $("#no-feed-results").show();
                }
            });

            $("#feed-loading").hide();
        };

        (function() {
            $(".delayed").delay(1000).show(500);
            $("#feed-load-btn").click(loadMoreFeedItems);
            $("#feed-load-btn").click();

            var tag = '[SOCIAL]';
            var maxItems = 10;
            var cid = '@System.Configuration.ConfigurationManager.AppSettings["google-calendar-id"]';
            var key = '@System.Configuration.ConfigurationManager.AppSettings["google-public-api-key"]';
            var resultsListEle = $('#socials');
            var noResultsEle = $('#no-socials');
            var countEle = $('#social-count');
            var eventItemClass = 'event-item';
            var minTime = moment().startOf('day').toISOString();
            var dateTimeFormat = 'dddd, MMMM D, YYYY @@ h:mm a';
            var apiUrl = `https://www.googleapis.com/calendar/v3/calendars/${cid}/events?key=${key}&timeMin=${minTime}&singleEvents=True&orderBy=startTime`;

            $.ajax({
                type: 'GET',
                url: encodeURI(apiUrl),
                dataType: 'json',
                success: function(response) {
                    $(`.${eventItemClass}`).remove();
                    var count = response.items.length;
                    if (typeof response.items !== 'undefined' && count > 0) {
                        noResultsEle.hide();
                    } else {
                        noResultsEle.show();
                        return;
                    }
                    var template = document.getElementById('social-template').innerHTML;
                    Mustache.parse(template);
                    var posted = 0;
                    for (var i = 0; i < count && posted < maxItems; i++) {
                        var item = response.items[i];
                        if (!item.description || !item.description.includes(tag)) continue;
                        var end = moment(item.end.dateTime);
                        var now = moment();
                        if (end <= now) continue;
                        var start = moment(item.start.dateTime);

                        var data = {
                            datetime: start.format(dateTimeFormat),
                            summary: item.summary,
                            status: start <= now && now < end ? 'active' : '',
                            color: eventItemClass
                        };
                        var rendered = Mustache.render(template, data);
                        resultsListEle.append(rendered);
                        posted++;
                    }
                    if (posted <= 0) {
                        noResultsEle.show();
                    } else {
                        countEle.text(posted);
                    }
                },
                error: function (response) {
                    $(`.${eventItemClass}`).remove();
                    noResultsEle.show();
                }
            });
        })();

    </script>
}