@model Dsp.Areas.Sphinx.Models.SphinxHomeIndexModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Sphinx";
    ViewBag.Subtitle = Model.CurrentSemester.ToString();
    var cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
    var nowCst = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, cstZone);

    // Permissions
    var isAdmin = User.IsInRole("Administrator");
    var isAlumnus = User.IsInRole("Alumnus");
    var isActive = User.IsInRole("Active");
    var isPledge = User.IsInRole("Pledge");
    var isNeophyte = User.IsInRole("Neophyte");
    var isAffiliate = User.IsInRole("Affiliate");

    // Laundry-related
    var laundry = Model.LaundrySummary.OrderBy(o => o.DateTimeShift);

    // Class-related
    var lastSemesterClasses = Model.MemberInfo.ClassesTaken.Where(c => c.SemesterId == Model.PreviousSemester.SemesterId).ToList();
    var thisSemesterClasses = Model.MemberInfo.ClassesTaken.Where(c => c.SemesterId == Model.CurrentSemester.SemesterId).ToList();

    // Service-related
    var approvedHours = 0.0;
    var unapprovedHours = 0.0;
    if (Model.CompletedEvents.Any())
    {
        approvedHours = Model.CompletedEvents.Where(e => e.Event.IsApproved).Sum(h => h.DurationHours);
        unapprovedHours = Model.CompletedEvents.Where(e => !e.Event.IsApproved).Sum(h => h.DurationHours);
    }
    var hourAmendments = Model.MemberInfo.ServiceHourAmendments.Where(a => a.SemesterId == Model.CurrentSemester.SemesterId);
    var eventAmendments = Model.MemberInfo.ServiceEventAmendments.Where(a => a.SemesterId == Model.CurrentSemester.SemesterId);
    var totalHourAmendment = hourAmendments.Sum(a => a.AmountHours);
    var totalEventAmendment = eventAmendments.Sum(a => a.NumberEvents);
    var hoursGoal = Model.CurrentSemester.MinimumServiceHours + totalHourAmendment;
    var eventGoal = Model.CurrentSemester.MinimumServiceEvents + totalEventAmendment;
    var approvedPercentage = (approvedHours) * 100.0;
    if (!hoursGoal.Equals(0))
    {
        approvedPercentage /= hoursGoal;
    }
    var unapprovedPercentage = (unapprovedHours) * 100.0;
    if (!hoursGoal.Equals(0))
    {
        unapprovedPercentage /= hoursGoal;
    }
    var barColor = approvedPercentage < 25 ? "danger" : approvedPercentage >= 100 ? "success" : "warning";
    var approvedWidth = approvedPercentage > 100 ? 100 : approvedPercentage;
    var unapprovedWidth = unapprovedPercentage + approvedPercentage > 100 ? 100 - approvedPercentage : unapprovedPercentage;
}

<div class="container-fluid">
    @if (isAdmin && Model.MemberInfo.UserName != User.Identity.Name)
    {
        <div class="alert alert-warning">
            <small><i class="fa fa-eye"></i> You are viewing this page as <strong>@Model.MemberInfo.ToString()</strong></small>
        </div>
    }
    @if (isActive || isPledge || isNeophyte || isAdmin)
    {
        <div class="row">
            <div class="col-lg-9 col-md-8">
                <div class="row">
                    <div class="col-lg-5">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <i class="fa fa-fw fa-car"></i>
                                Sober Signups
                            </div>
                            @Html.Partial("~/Areas/Sphinx/Views/Sobers/_SoberSchedulePartial.cshtml", Model.SoberSignups)
                        </div>
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <i class="fa fa-fw fa-tint"></i>
                                Laundry Status
                            </div>
                            <div class="list-group">
                                @if (laundry.Any())
                                {
                                    var minutesTil = (int)(laundry.First().DateTimeShift - nowCst).TotalMinutes;
                                    var hoursTil = (int)minutesTil / 60;

                                    if (minutesTil <= 0)
                                    {
                                        <div class="list-group-item list-group-item-danger">
                                            <small>
                                                <i class="fa fa-ban"></i> 
                                                Laundry room is currently reserved.
                                            </small>
                                        </div>
                                    }
                                    else if (minutesTil < 120)
                                    {
                                        <div class="list-group-item list-group-item-warning">
                                            <small>
                                                <i class="fa fa-ban"></i> 
                                                Someone will be using the room in @minutesTil minutes.
                                            </small>
                                        </div>
                                    }
                                    else if (minutesTil >= 120)
                                    {
                                        <div class="list-group-item list-group-item-success">
                                            <small>
                                                <i class="fa fa-exclamation-circle"></i> 
                                                Laundry room is available for the next @hoursTil hours.
                                            </small>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="list-group-item list-group-item-success">
                                        <small>
                                            <i class="fa fa-exclamation-circle"></i> 
                                            Laundry room is completely available.
                                        </small>
                                    </div>
                                }
                            </div>
                        </div>

                        @if (!lastSemesterClasses.Any() && Model.MemberInfo.PledgeClass.SemesterId == Model.CurrentSemester.SemesterId)
                        {
                            <div class="alert alert-warning">
                                <strong>New Member: </strong>You do not appear to have classes entered for @Model.PreviousSemester.ToString().

                                <small>
                                    <i class="fa fa-exclamation-triangle"></i> 
                                    If this is your first semester in college after graduating high school, disregard this message.
                                </small>

                                Otherwise, please go fill out your classes for last semester with the
                                @Html.ActionLink("Classes", "Schedule", "Classes", new {userName = Model.MemberInfo.UserName, area = "Edu"}, null).

                                If you transferred here from another college you attended after graduating high school,
                                you still need to enter your previous semester classes.
                            </div>
                        }
                    </div>
                    <div class="col-lg-7">
                        @if (Model.NeedsToSoberDrive && (isActive || isPledge || isNeophyte))
                        {
                            <div class="alert alert-warning delayed" style="display: none;">
                                Please sign up to sober drive at least once!
                                <a href="@Url.Action("Schedule", "Sobers")">
                                    Go to Schedule <i class="fa fa-caret-right"></i>
                                </a>
                            </div>
                        }
                        @if (Model.MemberInfo.Addresses.Any(a => a.Type == "Mailing" && !a.IsFilledOut()))
                        {
                            <div class="alert alert-warning delayed" style="display: none;">
                                Please provide your mailing address!
                                <a href="@Url.Action("Index", "Account", new {area = "Members"})">
                                    Go to Account <i class="fa fa-caret-right"></i>
                                </a>!
                            </div>
                        }
                        @if (Model.MemberInfo.PhoneNumbers.Any(a => a.Type == "Mobile" && string.IsNullOrEmpty(a.Number)))
                        {
                            <div class="alert alert-warning delayed" style="display: none;">
                                Please provide your mobile phone number!
                                <a href="@Url.Action("Index", "Account", new {area = "Members"})">
                                    Go to Account <i class="fa fa-caret-right"></i>
                                </a>!
                            </div>
                        }
                        @if (lastSemesterClasses.Any() && lastSemesterClasses.Any(c => string.IsNullOrEmpty(c.FinalGrade) && c.Dropped != true))
                        {
                            <div class="alert alert-warning delayed" style="display: none;">
                                You have not reported all of your grades for last semester!
                                <a href="@Url.Action("Transcript", "Classes", new {area = "Edu", userName = Model.MemberInfo.UserName})">
                                    Go to Transcript <i class="fa fa-caret-right"></i>
                                </a>
                            </div>
                        }
                        @if (!thisSemesterClasses.Any())
                        {
                            <div class="alert alert-warning delayed" style="display: none;">
                                You have not entered your courses for this semester!
                                <a href="@Url.Action("Schedule", "Classes", new {userName = Model.MemberInfo.UserName, area = "Edu"})">
                                    Go to Class Schedule <i class="fa fa-caret-right"></i>
                                </a>
                            </div>
                        }
                        @if (!Model.MemberInfo.MajorsToMember.Any())
                        {
                            <div class="alert alert-warning delayed" style="display: none;">
                                Please report your major! <a href="@Url.Action("Index", "Account", new {area = "Members"})">
                                    Go to Account <i class="fa fa-caret-right"></i>
                                </a>
                            </div>
                        }

                        <!-- SERVICE HOURS -->
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <i class="fa fa-fw fa-globe"></i>
                                Service Progress
                                <small class="pull-right">
                                    <a href="@Url.Action("Submit", "Hours", new {area = "Service"})"
                                       class="">
                                        <i class="fa fa-lg fa-plus-circle" data-toggle="tooltip" data-placement="top"
                                           title="Submit Hours"></i>
                                    </a> |
                                    <a href="@Url.Action("Index", "Events", new {area = "Service"})"
                                       class="">
                                        <i class="fa fa-lg fa-list" data-toggle="tooltip" data-placement="top"
                                           title="Event List"></i>
                                    </a>
                                </small>
                            </div>
                            @if (hoursGoal > 0)
                            {
                                <div class="panel-body">
                                    <div class="progress" style="margin: 0">
                                        <div class="progress-bar progress-bar-striped progress-bar-@barColor" role="progressbar"
                                             aria-valuenow="@(approvedHours)" aria-valuemin="0"
                                             aria-valuemax="@(hoursGoal)" style="width: @(approvedWidth)%;">
                                            @Math.Round(approvedPercentage, 2)%
                                        </div>
                                        @if (approvedHours < hoursGoal && unapprovedHours > 0)
                                        {
                                            <div class="progress-bar progress-bar-striped progress-bar-info" role="progressbar"
                                                 aria-valuenow="@(unapprovedHours)" aria-valuemin="0"
                                                 aria-valuemax="@(hoursGoal)" style="width: @(unapprovedWidth)%;">
                                                @Math.Round(unapprovedPercentage, 2)%
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            <div class="table-responsive">
                                <table class="table table-condensed table-bordered table-hover">
                                    <thead>
                                    @if (hoursGoal <= 0)
                                    {
                                        <tr class="info">
                                            <th colspan="4">
                                                <small>
                                                    <i class="fa fa-info-circle"></i> You have been exempted from service hours this semester.
                                                </small>
                                            </th>
                                        </tr>
                                    }
                                    <tr class="active">
                                        <th><small>Event</small></th>
                                        <th class="col-sm-2"><small>Date</small></th>
                                        <th class="col-sm-1">
                                            <i class="fa fa-check-circle" data-toggle="tooltip" data-placement="top"
                                               title="Approved: hours submitted for events not yet approved by the Service Chairman do not count
                                                              towards the semester minimum requirement."></i>
                                        </th>
                                        <th class="col-sm-1"><small>Hours</small></th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @if (!Model.CompletedEvents.Any())
                                    {
                                        <tr class="warning">
                                            <td colspan="4" class="text-center"><small>No service hours submitted yet.</small></td>
                                        </tr>
                                    }
                                    else
                                    {
                                        foreach (var item in Model.CompletedEvents.OrderBy(e => e.Event.DateTimeOccurred))
                                        {
                                            var attendedPercentage = (int) ((item.DurationHours/item.Event.DurationHours)*100.0);

                                            <tr type="button" data-toggle="collapse" data-target=".@item.EventId"
                                                aria-expanded="false" aria-controls="@item.EventId">
                                                <td>@item.Event.EventName</td>
                                                <td>@item.Event.DateTimeOccurred.ToShortDateString()</td>
                                                <td>@Html.DisplayFor(modelItem => item.Event.IsApproved)</td>
                                                <td>@item.DurationHours</td>
                                            </tr>
                                            <tr class="collapse @item.EventId">
                                                <td colspan="3">
                                                    <div class="progress" style="margin: 0"
                                                         data-toggle="tooltip" data-placement="left"
                                                         title="Attended event for @item.DurationHours of the possible @item.Event.DurationHours hour(s)">
                                                        <div class="progress-bar progress-bar-info" role="progressbar" aria-valuemin="0"
                                                             aria-valuenow="@(item.DurationHours)" aria-valuemax="@(item.Event.DurationHours)"
                                                             style="width: @(attendedPercentage > 100 ? 100 : attendedPercentage)%;">
                                                            @attendedPercentage%
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>

                                                </td>
                                            </tr>
                                        }
                                        <tr>
                                            <td class="text-right" colspan="3"><small>Total:</small></td>
                                            <td>
                                                @(approvedHours + unapprovedHours)
                                                @if (unapprovedHours > 0)
                                                {
                                                    <small>
                                                        <i class="fa fa-exclamation-triangle text-warning" data-toggle="tooltip" data-placement="top"
                                                           title="@unapprovedHours of these hours @((int)unapprovedHours == 1 ? "is" : "are") unapproved."></i>
                                                    </small>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                            <div class="panel-footer">
                                <small>Minimum Hours Required: <strong>@hoursGoal hours</strong></small><br/>
                                <small>Event Attendance: <strong>@Model.CompletedEvents.Count()/@eventGoal events</strong></small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-4">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <i class="fa fa-fw fa-newspaper-o"></i>
                        Feed <small class="pull-right">past 30 days</small>
                    </div>
                    <ul class="list-group" style="max-height: 650px; overflow-y:scroll">
                        <li class="list-group-item" id="feed-loading">
                            <i class="fa fa-spinner fa-spin"></i>
                        </li>
                        <li class="list-group-item text-center">
                            <button type="button" class="btn btn-xs btn-link" id="feed-load-btn">
                                Load More
                            </button>
                            <p class="subtext"><small id="feed-pages"></small></p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    }
    else if (isAlumnus)
    {
        <div class="row">
            <div class="col-md-5">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Sober Signups
                    </div>
                    @Html.Partial("~/Areas/Sphinx/Views/Sobers/_SoberSchedulePartial.cshtml", Model.SoberSignups)
                </div>
            </div>
            <div class="col-md-7">
                @if (Model.MemberInfo.Addresses.Any(a => a.Type == "Mailing" && !a.IsFilledOut()))
                {
                    <div class="alert alert-warning">
                        Please enter your mailing address on your <a href="@Url.Action("Index", "Account", new { area = "Admin" })">Account page</a>!
                    </div>
                }
                @if (Model.MemberInfo.PhoneNumbers.Any(a => a.Type == "Mobile" && string.IsNullOrEmpty(a.Number)))
                {
                    <div class="alert alert-warning">
                        Please enter your mobile phone number on your <a href="@Url.Action("Index", "Account", new { area = "Admin" })">Account page</a>!
                    </div>
                }
                <p>More Alumni content is forthcoming.</p>
            </div>
        </div>
    }
    else if (isAffiliate)
    {
        <p>Affiliate content is forthcoming.</p>
    }
</div>

@section scripts
{
    <script type="text/javascript">
        
        var loadMoreFeedItems = function () {
            this.page = (typeof this.page !== "undefined") ? this.page : 0;
            var parent = this;
            $("#feed-loading").show();
            $.ajax({
                url: "home/feed",
                data: { page: this.page },
                dataType: "html",
                success: function (data) {
                    $(".no-feed-results").remove();
                    $("#feed-loading").before(data);
                    parent.page++;
                    if (parent.page >= 10) {
                        $(".no-feed-results").remove();
                        $("#feed-load-btn").hide();
                        $("#feed-pages").text("Maximum feed length reached.");
                    } else {
                        $("#feed-pages").text("retrieved " + parent.page + " page(s)");
                    }
                }
            });

            $("#feed-loading").hide();
        };

        (function () {
            $(".delayed").delay(1000).show(500);
            $("#feed-load-btn").click(loadMoreFeedItems);
            $("#feed-load-btn").click();
        })();

    </script>
}