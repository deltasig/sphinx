@model WorkOrderViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Work Order";
    var cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
    var createdOn = TimeZoneInfo.ConvertTimeFromUtc(Model.WorkOrder.GetDateTimeCreated(), cstZone);
    var elevatedPermissions =
        User.IsInRole("Administrator") ||
        User.IsInRole("House Manager") ||
        Model.WorkOrder.UserId == User.Identity.GetUserId<int>();

    var comments = Model.WorkOrder.Comments.OrderBy(o => o.SubmittedOn);
    var statusChanges = Model.WorkOrder.StatusChanges.OrderBy(o => o.ChangedOn).Skip(1);
    var priorityChanges = Model.WorkOrder.PriorityChanges.OrderBy(o => o.ChangedOn);
    var discussion = new List<WorkOrderDiscussionEntry>();
    discussion.AddRange(comments.Select(c => new WorkOrderDiscussionEntry
    {
        OccurredOn = c.SubmittedOn,
        UserId = c.UserId,
        Name = c.Member.ToString(),
        Title = c.Member.ToString() + " " +
            ((DateTime.UtcNow - c.SubmittedOn).Days < 1 ? "< 1" : (DateTime.UtcNow - c.SubmittedOn).Days.ToString()) +
            ((DateTime.UtcNow - c.SubmittedOn).Days <= 1 ? " day" : " days") + " ago",
        Text = c.Text
    }));
    discussion.AddRange(statusChanges.Select(s => new WorkOrderDiscussionEntry
    {
        OccurredOn = s.ChangedOn,
        UserId = s.UserId,
        Name = s.Member.ToString(),
        Title = string.Empty,
        Text = "<strong>Status</strong> changed by <strong>" + s.Member.ToString() + "</strong> to <strong>" +
            s.Status.Name + "</strong>."
    }));
    discussion.AddRange(priorityChanges.Select(p => new WorkOrderDiscussionEntry
    {
        OccurredOn = p.ChangedOn,
        UserId = p.UserId,
        Name = p.Member.ToString(),
        Title = string.Empty,
        Text = "<strong>Priority</strong> changed by <strong>" + p.Member.ToString() + "</strong> to <strong>" +
        p.Priority.Name + "</strong>."
    }));

    var inProgressPost = new { typeName = "In Progress", id = Model.WorkOrder.WorkOrderId };
    var onHoldPost = new { typeName = "On Hold", id = Model.WorkOrder.WorkOrderId };
    var lowPost = new { typeName = "Low", id = Model.WorkOrder.WorkOrderId };
    var moderatePost = new { typeName = "Moderate", id = Model.WorkOrder.WorkOrderId };
    var highPost = new { typeName = "High", id = Model.WorkOrder.WorkOrderId };
}

@section Title
{
    @Html.Partial("_Title")
}

<div class="container">
    <div class="row">
        <div class="col-md-8" style="margin-bottom: 25px">
            <div class="row row-fluid">
                <div class="col-xs-6">
                    <p>
                        <a href="@Url.Action("Index")" class="btn btn-sm btn-default">
                            <i class="fa fa-caret-left"></i> Back to Work Orders
                        </a>
                    </p>
                </div>
                <div class="col-xs-6 text-right"><p></p></div>
            </div>

            @{
                var statuses = Model.WorkOrder.StatusChanges.OrderBy(o => o.ChangedOn);
                var status = statuses.Last().Status.Name;
                var priorities = Model.WorkOrder.PriorityChanges.OrderBy(o => o.ChangedOn);
                var priority = priorities.Last().Priority.Name;
                var statusLabelColor = status == "On-Hold"
                    ? "label-default"
                    : status == "Closed"
                        ? "label-success"
                        : status == "Under Review"
                            ? "label-info"
                            : status == "In Progress"
                                ? "label-warning"
                                : "label-default";
                var priorityLabelColor = priority == "Moderate"
                    ? "label-warning"
                    : priority == "High"
                        ? "label-danger"
                        : "label-default";
                var daysSinceOpen = (DateTime.UtcNow - Model.WorkOrder.GetDateTimeCreated()).Days;
            }

            <div class="row row-fluid">
                <div class="col-xs-12">
                    <h3 style="margin: 0 0 5px 0">
                        @Model.WorkOrder.Title <small>#@Model.WorkOrder.WorkOrderId</small>
                        @if (elevatedPermissions)
                        {
                            <a href="@Url.Action("Edit", new {id = Model.WorkOrder.WorkOrderId})"
                               class="btn btn-sm btn-default pull-right">
                                <i class="fa fa-wrench"></i> Edit
                            </a>
                        }
                    </h3>
                    <p>
                        <span class="label @statusLabelColor" style="font-weight: normal !important; margin-right: 5px;">
                            @status
                        </span>
                        <span class="label @priorityLabelColor" style="font-weight: normal !important; margin-right: 10px">
                            @priority Priority
                        </span>
                        <strong>@Model.WorkOrder.Member</strong>
                        created this work order @(daysSinceOpen < 1 ? "< 1" : daysSinceOpen.ToString())
                        @(daysSinceOpen <= 1 ? "day" : "days") ago · @Model.WorkOrder.Comments.Count Comments
                    </p>
                </div>
            </div>
            @if (elevatedPermissions)
            {
                <div class="row row-fluid">
                    <div class="col-xs-12">
                        <ul class="list-inline">
                            <li>Change Status to</li>
                            <li class="@(Model.WorkOrder.GetCurrentStatus() == "In Progress" ? "hidden" : "")">
                                @using (Html.BeginForm("ChangeWorkOrderStatus", "WorkOrders", inProgressPost, FormMethod.Post,
                                    new {@class = "form-inline"}))
                                {
                                    <input value="In Progress" type="submit" class="btn btn-xs btn-warning"/>
                                }
                            </li>
                            <li class="@(Model.WorkOrder.GetCurrentStatus() == "On Hold" ? "hidden" : "")">
                                @using (Html.BeginForm("ChangeWorkOrderStatus", "WorkOrders", onHoldPost, FormMethod.Post,
                                    new {@class = "form-inline"}))
                                {
                                    <input value="On Hold" type="submit" class="btn btn-xs btn-default"/>
                                }
                            </li>
                        </ul>
                    </div>
                </div>
            }
            @if (elevatedPermissions && Model.WorkOrder.GetCurrentStatus() != "Closed")
            {
                <div class="row row-fluid">
                    <div class="col-xs-12">
                        <ul class="list-inline">
                            <li>Change Priority to</li>
                            <li class="@(Model.WorkOrder.GetCurrentPriority() == "Low" ? "hidden" : "")">
                                @using (Html.BeginForm("ChangeWorkOrderPriority", "WorkOrders", lowPost, FormMethod.Post))
                                {
                                    <input value="Low" type="submit" class="btn btn-xs btn-default" />
                                }
                            </li>
                            <li class="@(Model.WorkOrder.GetCurrentPriority() == "Moderate" ? "hidden" : "")">
                                @using (Html.BeginForm("ChangeWorkOrderPriority", "WorkOrders", moderatePost, FormMethod.Post))
                                {
                                    <input value="Moderate" type="submit" class="btn btn-xs btn-warning" />
                                }
                            </li>
                            <li class="@(Model.WorkOrder.GetCurrentPriority() == "High" ? "hidden" : "")">
                                @using (Html.BeginForm("ChangeWorkOrderPriority", "WorkOrders", highPost, FormMethod.Post))
                                {
                                    <input value="High" type="submit" class="btn btn-xs btn-danger" />
                                }
                            </li>
                        </ul>
                    </div>
                </div>
            }
            <hr />
            <div class="row row-fluid">
                <div class="col-xs-12">
                    <div class="media">
                        <div class="media-left">
                            <img class="img-rounded img-@Model.WorkOrder.UserId" alt=""
                                 height="50" width="50" id="@Model.WorkOrder.UserId">
                        </div>
                        <div class="media-body">
                            <div class="popover-static">
                                <div class="popover right">
                                    <div class="arrow"></div>
                                    <h3 class="popover-title">
                                        Initial Description
                                    </h3>
                                    <div class="popover-content">
                                        <p>@Model.WorkOrder.Description</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @foreach (var d in discussion.OrderBy(o => o.OccurredOn))
            {
                <div class="row row-fluid">
                    <div class="col-xs-12">
                        <div class="media">
                            <div class="media-left">
                                @if (string.IsNullOrEmpty(d.Title))
                                {
                                    <img class="img-rounded img-@d.UserId" alt="" style="margin: 13px 0 0 23px"
                                         height="25" width="25" id="@d.UserId">
                                }
                                else
                                {
                                    <img class="img-rounded img-@d.UserId" alt=""
                                         height="50" width="50" id="@d.UserId">
                                }
                            </div>
                            <div class="media-body">
                                <div class="popover-static">
                                    <div class="popover right">
                                        <div class="arrow"></div>
                                        @if (!string.IsNullOrEmpty(d.Title))
                                        {
                                            <h3 class="popover-title">
                                                @d.Title
                                            </h3>
                                        }
                                        <div class="popover-content">
                                            <p>
                                                @if (!string.IsNullOrEmpty(d.Title))
                                                {
                                                    @d.Text
                                                }
                                                else
                                                {
                                                    @Html.Raw(d.Text)
                                                }
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <hr />
            @if (Model.WorkOrder.GetCurrentStatus() != "Closed")
            {
                <div class="row row-fluid">
                    <div class="col-xs-12">
                        <div class="media">
                            <div class="media-left">
                                <img class="img-rounded img-@Model.WorkOrder.UserId" alt=""
                                     height="50" width="50" id="@User.Identity.GetUserId<int>()">
                            </div>
                            <div class="media-body">
                                <div class="popover-static">
                                    <div class="popover right">
                                        <div class="arrow"></div>
                                        <div class="popover-content text-right">
                                            @using (Html.BeginForm("Comment", "WorkOrders", FormMethod.Post))
                                            {
                                                <input id="workOrderId" name="workOrderId" type="hidden" value="@Model.WorkOrder.WorkOrderId">
                                                <div class="form-group">
                                                    <textarea class="form-control" id="comment" name="comment" placeholder="Leave a comment"
                                                              type="text" rows="2"></textarea>
                                                </div>
                                                <div class="checkbox form-group pull-left @(!elevatedPermissions ? "hidden" : "")" style="display: inline">
                                                    <label class="control-label">
                                                        @Html.CheckBox("close")
                                                        Close Work Order
                                                    </label>
                                                </div>
                                                <input class="btn btn-success" type="submit" value="Comment" />
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-4">
            @Html.Partial("MyWorkOrders", Model.UserWorkOrders)
        </div>
    </div>
</div>

@section scripts
{
    <script>

        var ids = $(".img-rounded").map(function () { return this.id; }).toArray();

        $.each(ids, function (key, value) {
            $(".img-" + value).attr("src", "http://thecatapi.com/api/images/get?format=src&type=png&" + key);
        });

    </script>
}
