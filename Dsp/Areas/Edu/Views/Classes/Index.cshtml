@using Dsp.Areas.Edu.Models;
@using Microsoft.AspNet.Identity
@model ClassIndexModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Classes";
    var filter = new ClassesIndexFilterModel
    {
        page = ViewBag.Page,
        select = ViewBag.Select,
        sort = ViewBag.Sort,
        s = ViewBag.CurrentFilter
    };
    var sortNumberAscFilter = new ClassesIndexFilterModel(filter);
    var sortNumberDescFilter = new ClassesIndexFilterModel(filter);
    var sortNameAscFilter = new ClassesIndexFilterModel(filter);
    var sortNameDescFilter = new ClassesIndexFilterModel(filter);
    var sortFilesAscFilter = new ClassesIndexFilterModel(filter);
    var sortFilesDescFilter = new ClassesIndexFilterModel(filter);
    var sortTakenAscFilter = new ClassesIndexFilterModel(filter);
    var sortTakenDescFilter = new ClassesIndexFilterModel(filter);
    var sortTakingAscFilter = new ClassesIndexFilterModel(filter);
    var sortTakingDescFilter = new ClassesIndexFilterModel(filter);
    var pagePreviousFilter = new ClassesIndexFilterModel(filter);
    var pageNextFilter = new ClassesIndexFilterModel(filter);
    var selectMeAllFilter = new ClassesIndexFilterModel(filter);
    var selectMeNowFilter = new ClassesIndexFilterModel(filter);
    var selectBeingTakenFilter = new ClassesIndexFilterModel(filter);
    var selectNoneTakingFilter = new ClassesIndexFilterModel(filter);
    var selectHasFileFilter = new ClassesIndexFilterModel(filter);
    var selectNoFileFilter = new ClassesIndexFilterModel(filter);

    const string sortNumberAscText = "number-asc";
    const string sortNumberDescText = "number-desc";
    const string sortNameAscText = "name-asc";
    const string sortNameDescText = "name-desc";
    const string sortFilesAscText = "files-asc";
    const string sortFilesDescText = "files-desc";
    const string sortTakenAscText = "taken-asc";
    const string sortTakenDescText = "taken-desc";
    const string sortTakingAscText = "taking-asc";
    const string sortTakingDescText = "taking-desc";
    const string selectMeAllText = "me-all";
    const string selectMeNowText = "me-now";
    const string selectBeingTakenText = "being-taken";
    const string selectNoneTakingText = "none-taking";
    const string selectHasFileText = "has-file";
    const string selectNoFileText = "no-file";

    sortNumberAscFilter.sort = filter.sort == sortNumberAscText ? "" : sortNumberAscText;
    sortNumberDescFilter.sort = filter.sort == sortNumberDescText ? "" : sortNumberDescText;
    sortNameAscFilter.sort = filter.sort == sortNameAscText ? "" : sortNameAscText;
    sortNameDescFilter.sort = filter.sort == sortNameDescText ? "" : sortNameDescText;
    sortFilesAscFilter.sort = filter.sort == sortFilesAscText ? "" : sortFilesAscText;
    sortFilesDescFilter.sort = filter.sort == sortFilesDescText ? "" : sortFilesDescText;
    sortTakenAscFilter.sort = filter.sort == sortTakenAscText ? "" : sortTakenAscText;
    sortTakenDescFilter.sort = filter.sort == sortTakenDescText ? "" : sortTakenDescText;
    sortTakingAscFilter.sort = filter.sort == sortTakingAscText ? "" : sortTakingAscText;
    sortTakingDescFilter.sort = filter.sort == sortTakingDescText ? "" : sortTakingDescText;
    pagePreviousFilter.page = filter.page - 1;
    pageNextFilter.page = filter.page + 1;
    selectMeAllFilter.select = filter.select == selectMeAllText ? "" : selectMeAllText;
    selectMeNowFilter.select = filter.select == selectMeNowText ? "" : selectMeNowText;
    selectBeingTakenFilter.select = filter.select == selectBeingTakenText ? "" : selectBeingTakenText;
    selectNoneTakingFilter.select = filter.select == selectNoneTakingText ? "" : selectNoneTakingText;
    selectHasFileFilter.select = filter.select == selectHasFileText ? "" : selectHasFileText;
    selectNoFileFilter.select = filter.select == selectNoFileText ? "" : selectNoFileText;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12">
            <div class="row row-space">
                <div class="col-md-6">
                    @using (Html.BeginForm("Index", "Classes", FormMethod.Get, new { @class = "form-inline" }))
                    {
                        <div class="btn-group" role="group" aria-label="...">
                            <div class="btn-group" role="group" aria-label="...">
                                <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                                    Sort <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                    <li role="presentation" class="@(ViewBag.sort == sortNumberAscText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortNumberAscFilter)">
                                            <i class="fa fa-fw fa-sort-numeric-asc"></i> Class Number <small>ASC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortNumberDescText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortNumberDescFilter)">
                                            @if (ViewBag.Sort == sortNumberDescText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-numeric-desc"></i> Class Number <small>DESC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortNameAscText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortNameAscFilter)">
                                            @if (ViewBag.Sort == sortNameAscText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-alpha-asc"></i> Class Name <small>ASC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortNameDescText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortNameDescFilter)">
                                            @if (ViewBag.Sort == sortNameDescText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-alpha-desc"></i> Class Name <small>DESC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortTakenAscText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortTakenAscFilter)">
                                            @if (ViewBag.Sort == sortTakenAscText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-amount-asc"></i> Enrollment Current <small>ASC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortTakenDescText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortTakenDescFilter)">
                                            @if (ViewBag.Sort == sortTakenDescText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-amount-desc"></i> Enrollment Current <small>DESC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortTakingAscText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortTakingAscFilter)">
                                            @if (ViewBag.Sort == sortTakingAscText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-amount-asc"></i> Enrollment All <small>ASC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortTakingDescText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortTakingDescFilter)">
                                            @if (ViewBag.Sort == sortTakingDescText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-amount-desc"></i> Enrollment All <small>DESC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortFilesAscText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortFilesAscFilter)">
                                            @if (ViewBag.Sort == sortFilesAscText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-amount-asc"></i> Files <small>ASC</small>
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == sortFilesDescText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", sortFilesDescFilter)">
                                            @if (ViewBag.Sort == sortFilesDescText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            <i class="fa fa-fw fa-sort-amount-desc"></i> Files <small>DESC</small>
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="btn-group" role="group" aria-label="...">
                                <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                                    Selection <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                    <li role="presentation" class="@(ViewBag.sort == selectMeAllText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", selectMeAllFilter)">
                                            @if (ViewBag.Select == selectMeAllText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            All of my classes
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == selectMeNowText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", selectMeNowFilter)">
                                            @if (ViewBag.Select == selectMeNowText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            All of my current classes
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == selectBeingTakenText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", selectBeingTakenFilter)">
                                            @if (ViewBag.Select == selectBeingTakenText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            Classes being taken
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == selectNoneTakingText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", selectNoneTakingFilter)">
                                            @if (ViewBag.Select == selectNoneTakingText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            Classes not being taken
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == selectHasFileText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", selectHasFileFilter)">
                                            @if (ViewBag.Select == selectHasFileText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            Classes with a file
                                        </a>
                                    </li>
                                    <li role="presentation" class="@(ViewBag.sort == selectNoFileText ? "active" : "")">
                                        <a role="menuitem" tabindex="-1" href="@Url.Action("Index", selectNoFileFilter)">
                                            @if (ViewBag.Select == selectNoFileText)
                                            {
                                                <i class="fa fa-fw fa-times-circle-o"></i>
                                            }
                                            Classes without a file
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <hr class="visible-xs" />
                        <div class="input-group">
                            <span class="input-group-addon" id="search-addon" data-toggle="tooltip" data-placement="top"
                                  title="Search by class number, name, department, or member.">
                                <i class="fa fa-search"></i>
                            </span>
                            <input id="page" name="page" type="hidden" value="@ViewBag.Page.ToString()">
                            <input id="sort" name="sort" type="hidden" value="@ViewBag.Sort.ToString()">
                            <input id="select" name="select" type="hidden" value="@(ViewBag.Select == null ? "" : ViewBag.Select.ToString())">
                            <input class="form-control" id="s" name="s" placeholder="Search" type="text" 
                                   value="@ViewBag.CurrentFilter" aria-describedby="search-addon">
                        </div>
                    }
                    <hr class="visible-xs visible-sm" />
                </div>
                <div class="col-md-6 text-right">
                    <div class="btn-group" role="group" aria-label="...">
                        @{ Html.RenderPartial("~/Areas/Edu/Views/Shared/_EduNavPartial.cshtml"); }
                        @Html.ActionLink("My Classes", "Schedule", new { userName = User.Identity.GetUserName() }, new { @class = "btn btn-default" })
                        @Html.ActionLink("Add Class", "Create", null, new { @class = "btn btn-success" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            @if (Model.Classes.Any())
            {
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-xs-12">
                                @ViewBag.Count <small>Results</small>
                                @if (!string.IsNullOrEmpty(ViewBag.Select))
                                {
                                    string selection = ViewBag.Select.ToString();
                                    var text = string.Empty;
                                    switch (selection)
                                    {
                                        case "me-all":
                                            text = "All of my classes";
                                            break;
                                        case "me-now":
                                            text = "My current classes";
                                            break;
                                        case "being-taken":
                                            text = "Classes currently being taken";
                                            break;
                                        case "none-taking":
                                            text = "Classes no one is taking";
                                            break;
                                        case "has-file":
                                            text = "Classes with a file";
                                            break;
                                        case "no-file":
                                            text = "Classes with no file";
                                            break;
                                    }
                                    <small>| Selection: <em>@text</em></small>
                                }
                                @if (!string.IsNullOrEmpty(ViewBag.CurrentFilter))
                                {
                                    <small>| Searched for: <em>@ViewBag.CurrentFilter</em></small>
                                }
                            </div>
                        </div>
                    </div>
                    <ul class="list-group">
                        @foreach (var c in Model.Classes)
                        {
                            <a href="@Url.Action("Details", new {id = c.ClassId})" class="list-group-item">
                                <h4 class="list-group-item-heading">
                                    <small>@c.CourseShorthand</small>
                                    <span class="badge pull-right" data-toggle="tooltip" data-placement="top" title="Enrolled (currently)">
                                        <i class="fa fa-fw fa-user"></i> 
                                        @c.ClassesTaken.Count(t => t.SemesterId == Model.CurrentSemester.SemesterId)
                                    </span>
                                    <span class="badge pull-right" data-toggle="tooltip" data-placement="top" title="Enrolled (all-time)">
                                        <i class="fa fa-fw fa-users"></i>
                                        @c.ClassesTaken.Count
                                    </span>
                                    <span class="badge pull-right" data-toggle="tooltip" data-placement="top" title="File Count">
                                        <i class="fa fa-fw fa-book"></i>
                                        @c.ClassFiles.Count
                                    </span>
                                    <br class="visible-xs" />
                                    @c.CourseName
                                </h4>
                            </a>
                        }
                    </ul>
                    @if (ViewBag.Count > ViewBag.PageSize)
                    {
                        <nav class="text-center">
                            <ul class="pagination">
                                <li class="@(ViewBag.Page > 1 ? "" : "disabled")">
                                    @if (ViewBag.Page > 1)
                                    {
                                        <a href="@Url.Action("Index", pagePreviousFilter)" aria-label="Previous">
                                            <i class="fa fa-caret-left" aria-hidden="true"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        <span><i class="fa fa-caret-left" aria-hidden="true"></i></span>
                                    }
                                </li>
                                @for (var i = 1; i <= ViewBag.Pages; i++)
                                {
                                    var pageFilter = filter;
                                    pageFilter.page = i;

                                    <li class="@(ViewBag.Page == i ? "active" : "")">
                                        <a href="@Url.Action("Index", pageFilter)">@i</a>
                                    </li>
                                }
                                <li class="@(ViewBag.Page < ViewBag.Pages ? "" : "disabled")">
                                    @if (ViewBag.Page < ViewBag.Pages)
                                    {
                                        <a href="@Url.Action("Index", pageNextFilter)" aria-label="Next">
                                            <i class="fa fa-caret-right" aria-hidden="true"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        <span><i class="fa fa-caret-right" aria-hidden="true"></i></span>
                                    }
                                </li>
                            </ul>
                        </nav>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    No classes found.
                </div>
            }
        </div>
    </div>
</div>
