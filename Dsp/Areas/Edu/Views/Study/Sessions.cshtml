@using Microsoft.AspNet.Identity
@model Dsp.Areas.Edu.Models.StudySessionModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Study Session";
    var cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
    var nowCst = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, cstZone);
    var hasElevatedPermissions = User.IsInRole("Administrator") || User.IsInRole("Academics");
    var membersOnAssignment = Model.StudyPeriod.Assignments.Select(m => m.MemberId).ToList();
    var proctors = Model.StudySession.Proctors.Select(m => m.MemberId).ToList();
    var isProctor = hasElevatedPermissions || proctors.Contains(User.Identity.GetUserId<int>());
    var canSignIn = nowCst > Model.StudySession.BeginsOn.AddMinutes(-15);
    var isPastTime = nowCst > Model.StudySession.EndsOn.AddMinutes(15);
}
@section AdditionalMeta{
    <meta http-equiv="refresh" content="60">
}

<div class="container-fluid">
    <div class="row row-space">
        <div class="col-md-5">
            <a href="@Url.Action("Index")" class="btn btn-sm btn-default">
                <i class="fa fa-caret-left"></i> Back to Dashboard
            </a>
            <hr class="visible-xs visible-sm" />
        </div>
        <div class="col-md-7 text-right">
            @if (hasElevatedPermissions)
            {
                <a href="@Url.Action("EditSession", new {id = Model.StudySession.Id})" class="btn btn-sm btn-info">
                    <i class="fa fa-cog"></i> Edit
                </a>

                if (!Model.StudySession.Proctors.Any())
                {
                    <a href="@Url.Action("DeleteSession", new {id = Model.StudySession.Id})" class="btn btn-sm btn-danger">
                        <i class="fa fa-times"></i> Delete
                    </a>
                }
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-fw fa-clock-o"></i> Study Period
                </div>
                <div class="list-group">
                    <a class="list-group-item" href="@Url.Action("Period", new {id = Model.StudyPeriod.Id})">
                        <div class="row">
                            <div class="col-xs-3"><small>Begins</small></div>
                            <div class="col-xs-9"><small>@Model.StudyPeriod.BeginsOn.ToString("G")</small></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-3"><small>Ends</small></div>
                            <div class="col-xs-9"><small>@Model.StudyPeriod.EndsOn.ToString("G")</small></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-3"><small>Fine</small></div>
                            <div class="col-xs-9"><small>$@Model.StudyPeriod.FineAmount per missed hour</small></div>
                        </div>
                    </a>
                </div>
                <div class="panel-heading"><i class="fa fa-fw fa-list-ol"></i> Study Sessions</div>
                <div class="list-group">
                    @if (Model.StudySessions.Any())
                    {
                        foreach (var s in Model.StudySessions.OrderBy(s => s.BeginsOn))
                        {
                            var isCurrentSession = s.BeginsOn < nowCst && nowCst < s.EndsOn;
                            var isActive = s.Id == Model.StudySession.Id;

                            <a href="@Url.Action("Sessions", new {id = s.Id})"
                               class="list-group-item @(isActive ? "active" : "")">
                                <small>@s.BeginsOn.ToString("g") to @s.EndsOn.ToString("t")</small>
                                @if (isCurrentSession)
                                {
                                    <i class="fa fa-exclamation-circle text-success"></i>
                                }
                                @if (!s.Proctors.Any())
                                {
                                    <i class="fa fa-exclamation-triangle text-danger"></i>
                                }
                                <br />
                                <small>@s.Location</small>
                            </a>
                        }
                        <div class="panel-footer">
                            <i class="fa fa-exclamation-circle text-success"></i><small> Session is currently in progress</small><br/>
                            <i class="fa fa-exclamation-triangle text-danger"></i><small> Session has no proctors</small>
                        </div>
                    }
                    else
                    {
                        <div class="list-group-item list-group-item-warning">
                            No sessions were found.
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-fw fa-users"></i> Members with a study hour assignment
                </div>
                <table class="table table-condensed">
                    <thead>
                    @if (isPastTime)
                    {
                        <tr class="warning">
                            <td colspan="3">
                                <small>
                                    <i class="fa fa-exclamation-triangle"></i>
                                    <strong>The session has ended.</strong> 
                                    If information recorded here needs to be changed, the proctors can no longer do anything.
                                    You will need to contact the Academic Chairman to make changes.
                                </small>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr class="info">
                            <td colspan="3">
                                <small>
                                    <i class="fa fa-info-circle"></i>
                                    The academic chairman and proctors can begin signing people in up to 15 minutes before the sessions starts.
                                </small>
                            </td>
                        </tr>
                    }
                    </thead>
                    <tbody>
                    @if (Model.StudyPeriod.Assignments.Any())
                    {
                        foreach (var a in Model.StudyPeriod.Assignments.OrderBy(m => m.Member.LastName))
                        {
                            var signIn = a.StudyHours
                                .SingleOrDefault(h => h.AssignmentId == a.Id && h.SessionId == Model.StudySession.Id && h.MemberId == a.MemberId);

                            <tr>
                                <td class="col-xs-3">@a.Member</td>
                                <td>
                                    @if (signIn != null)
                                    {
                                        if (signIn.SignedOutOn != null)
                                        {
                                            <small>Studied for @(signIn.DurationMinutes) minutes(s)</small>
                                        }
                                        else
                                        {
                                            <small>Studied for @(Math.Round((nowCst - signIn.SignedInOn).TotalMinutes, 0)) minutes(s) so far</small>
                                        }
                                    }
                                    else
                                    {
                                        <small>Did not study during this session</small>
                                    }
                                </td>
                                <td class="col-xs-2 text-right">
                                    @if ((!isPastTime && canSignIn) || hasElevatedPermissions)
                                    {
                                        if (signIn == null && isProctor)
                                        {
                                            using (Html.BeginForm("SessionSignIn", "Study",
                                                new { aid = a.Id, sid = Model.StudySession.Id, mid = a.MemberId }, FormMethod.Post))
                                            {
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-xs btn-success">
                                                    <i class="fa fa-sign-in"></i> Sign In
                                                </button>
                                            }
                                        }
                                        else if (signIn != null && signIn.SignedOutOn == null && isProctor)
                                        {
                                            using (Html.BeginForm("SessionSignOut", "Study", new { shid = signIn.Id }, FormMethod.Post))
                                            {
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-xs btn-danger">
                                                    <i class="fa fa-sign-out"></i> Sign Out
                                                </button>
                                            }
                                        }
                                        else if (signIn != null && signIn.SignedOutOn != null && isProctor)
                                        {
                                            <a href="@Url.Action("EditSignIn", new {id = signIn.Id})"
                                               class="btn btn-xs btn-info">
                                                <i class="fa fa-cog"></i>
                                            </a>
                                            <a href="@Url.Action("DeleteSignIn", new {id = signIn.Id})"
                                               class="btn btn-xs btn-danger">
                                                <i class="fa fa-times"></i>
                                            </a>
                                        }
                                    }
                                    else if (hasElevatedPermissions)
                                    {
                                        if (signIn == null)
                                        {
                                            using (Html.BeginForm("SessionSignIn", "Study",
                                                new { aid = a.Id, sid = Model.StudySession.Id, mid = a.MemberId }, FormMethod.Post))
                                            {
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-xs btn-success">
                                                    <i class="fa fa-sign-in"></i> Sign In
                                                </button>
                                            }
                                        }
                                        else if (signIn != null && signIn.SignedOutOn == null)
                                        {
                                            using (Html.BeginForm("SessionSignOut", "Study", new { shid = signIn.Id }, FormMethod.Post))
                                            {
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-xs btn-danger">
                                                    <i class="fa fa-sign-out"></i> Sign Out
                                                </button>
                                            }
                                        }
                                        else if (signIn != null && signIn.SignedOutOn != null)
                                        {
                                            <a href="@Url.Action("EditSignIn", new {id = signIn.Id})"
                                               class="btn btn-xs btn-info">
                                                <i class="fa fa-cog"></i>
                                            </a>
                                            <a href="@Url.Action("DeleteSignIn", new {id = signIn.Id})"
                                               class="btn btn-xs btn-danger">
                                                <i class="fa fa-times"></i>
                                            </a>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr class="warning">
                            <td colspan="3">No one is assigned to study hours during this period.</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-md-3">
            <div class="panel panel-default">
                <div class="panel-heading"><i class="fa fa-fw fa-user-times"></i> Proctors</div>
                <div class="list-group">
                    @if (Model.StudySession.Proctors.Any())
                    {
                        foreach (var m in Model.StudySession.Proctors.OrderBy(m => m.Member.LastName))
                        {
                            using (Html.BeginForm("UnassignProctor", "Study", FormMethod.Post, new { @class = "hidden", id = m.Id }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("pid", m.Id)
                            }

                            <button class="list-group-item list-group-item-warning" onclick="$('#@(m.Id)').submit();">
                                @m.Member.ToString()
                                <i class="fa fa-times text-danger pull-right"></i>
                            </button>
                        }
                    }
                    else
                    {
                        <div class="list-group-item list-group-item-warning">
                            No proctors have been assigned yet.
                        </div>
                    }
                </div>
                @if (hasElevatedPermissions)
                {
                    <div class="panel-heading"><i class="fa fa-fw fa-user-plus"></i> Assign Proctor</div>
                    <div class="list-group" style="max-height: 400px; overflow-y: scroll">
                        @if (Model.Members.Any())
                        {
                            foreach (var m in Model.Members.OrderBy(m => m.LastName))
                            {
                                if (!membersOnAssignment.Contains(m.Id) && !proctors.Contains(m.Id))
                                {
                                    using (Html.BeginForm("AssignProctor", "Study", FormMethod.Post, new { @class = "hidden", id = m.Id }))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("mid", m.Id)
                                        @Html.Hidden("sid", Model.StudySession.Id)
                                    }
                                    <button class="list-group-item" onclick="$('#@(m.Id)').submit();">
                                        @m.ToString()
                                        <i class="fa fa-plus-square text-success pull-right"></i>
                                    </button>
                                }
                            }
                        }
                        else
                        {
                            <div class="list-group-item list-group-item-warning">
                                No members were found in the system.
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
