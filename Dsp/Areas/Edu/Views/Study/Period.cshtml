@model Dsp.Areas.Edu.Models.StudyPeriodModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Study Period";
    var cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
    var nowCst = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, cstZone);
    var hasElevatedPermissions = User.IsInRole("Administrator") || User.IsInRole("Academics");
    var membersOnAssignment = Model.StudyPeriod.Assignments.Select(m => m.MemberId).ToList();
}

<div class="container-fluid">
    <div class="row row-space">
        <div class="col-md-3">
            <a href="@Url.Action("Index")" class="btn btn-sm btn-default">
                <i class="fa fa-caret-left"></i> Back to Dashboard
            </a>
            <hr class="visible-xs visible-sm" />
        </div>
        <div class="col-md-9 text-right">
            @if (hasElevatedPermissions)
            {
                <a href="@Url.Action("EditPeriod", new {id = Model.StudyPeriod.Id})" class="btn btn-sm btn-info">
                    <i class="fa fa-cog"></i> Edit
                </a>

                if (!Model.StudyPeriod.Assignments.Any())
                {
                    <a href="@Url.Action("DeletePeriod", new {id = Model.StudyPeriod.Id})" class="btn btn-sm btn-danger">
                        <i class="fa fa-times"></i> Delete
                    </a>
                }
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-fw fa-clock-o"></i> Study Period
                </div>
                <div class="list-group">
                    <a class="list-group-item active">
                        <div class="row">
                            <div class="col-xs-3"><small>Begins</small></div>
                            <div class="col-xs-9"><small>@Model.StudyPeriod.BeginsOn.ToString("G")</small></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-3"><small>Ends</small></div>
                            <div class="col-xs-9"><small>@Model.StudyPeriod.EndsOn.ToString("G")</small></div>
                        </div>
                        <div class="row">
                            <div class="col-xs-3"><small>Fine</small></div>
                            <div class="col-xs-9"><small>$@Model.StudyPeriod.FineAmount per missed hour</small></div>
                        </div>
                    </a>
                </div>
                <div class="panel-heading">
                    <i class="fa fa-fw fa-list-ol"></i> Study Sessions
                    @using (Html.BeginForm("ImportPreviousSessions", "Study", FormMethod.Post, new { @class = "pull-right" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("pid", Model.StudyPeriod.Id)
                        @Html.Hidden("ppid", Model.PreviousStudyPeriodId)

                        if (Model.PreviousStudyPeriodId != null)
                        {
                            <button type="submit" class="btn btn-xs btn-default"
                                    data-toggle="tooltip" data-placement="top" title="Import sessions from previous period">
                                <i class="fa fa-download"></i>
                            </button>
                        }
                    }
                </div>
                <div class="list-group">
                    @if (Model.StudySessions.Any())
                    {
                        foreach (var s in Model.StudySessions.OrderBy(s => s.BeginsOn))
                        {
                            var isCurrentSession = s.BeginsOn < nowCst && nowCst < s.EndsOn;

                            <a href="@Url.Action("Sessions", new {id = s.Id})"
                               class="list-group-item">
                                <small>@s.BeginsOn.ToString("g") to @s.EndsOn.ToString("t")</small>
                                @if (isCurrentSession)
                                {
                                    <i class="fa fa-exclamation-circle text-success"></i>
                                }
                                @if (!s.Proctors.Any())
                                {
                                    <i class="fa fa-exclamation-triangle text-danger"></i>
                                }
                                <br />
                                <small>@s.Location</small>
                            </a>
                        }
                        <div class="panel-footer">
                            <i class="fa fa-exclamation-circle text-success"></i><small> Session is currently in progress</small><br />
                            <i class="fa fa-exclamation-triangle text-danger"></i><small> Session has no proctors</small>
                        </div>
                    }
                    else
                    {
                        <div class="list-group-item list-group-item-warning">
                            No sessions were found.
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-fw fa-users"></i> Members with a study hour assignment
                    @using (Html.BeginForm("ImportPreviousPeriodAssignments", "Study", FormMethod.Post, new { @class = "pull-right" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("pid", Model.StudyPeriod.Id)
                        @Html.Hidden("ppid", Model.PreviousStudyPeriodId)

                        if (Model.PreviousStudyPeriodId != null)
                        {
                            <button type="submit" class="btn btn-xs btn-default"
                                    data-toggle="tooltip" data-placement="top" title="Import assignments from previous period">
                                <i class="fa fa-download"></i>
                            </button>
                        }
                    }
                </div>
                <div class="list-group">
                    @if (Model.StudyPeriod.Assignments.Any())
                    {
                        foreach (var a in Model.StudyPeriod.Assignments.OrderBy(m => m.Member.LastName))
                        {
                            var progressPercentage = Math.Round(
                                (a.StudyHours.Sum(s => s.DurationMinutes ?? 0) / (a.AmountOfHours * 60)) * 100, 2);
                            var progressPercentageAdjusted = progressPercentage > 100 ? 100 : progressPercentage;
                            var barColor = progressPercentage >= 100 ? "progress-bar-success" : "progress-bar-warning";

                            <div class="list-group-item">
                                <h5 class="list-group-item-heading">
                                    @a.Member <small>@a.StudyHours.Sum(s => s.DurationMinutes) of @(a.AmountOfHours*60) minutes completed</small>
                                </h5>
                                @using (Html.BeginForm("UnassignMemberToPeriod", "Study", FormMethod.Post, new { @class = "form-inline" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Hidden("aid", a.Id)

                                    if (!a.StudyHours.Any())
                                    {
                                        <button type="submit" class="btn btn-xs btn-link pull-right"
                                                data-toggle="tooltip" data-placement="top"
                                                title="Delete this assignment">
                                            <i class="fa fa-times-circle text-danger"></i>
                                        </button>
                                    }
                                }
                                <div class="progress" style="margin-bottom:0">
                                    <div class="progress-bar @barColor" role="progressbar" 
                                         aria-valuenow="@progressPercentageAdjusted" aria-valuemin="0" aria-valuemax="100" style="width: @progressPercentageAdjusted%;">
                                        @progressPercentage%
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="list-group-item list-group-item-warning">
                            No one is assigned to study hours during this period.
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-3">
            @if (hasElevatedPermissions)
            {
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Assign a member study hours
                    </div>
                    <div class="panel-heading">
                        <small>Enter an amount, then select a member</small>
                        @Html.TextBox("amount", Model.DefaultHourAmount, new {@class = "form-control", style = "", autocomplete = "off", id = "hours"})
                    </div>
                    <div class="list-group" style="max-height: 450px; overflow-y: scroll">
                        @if (Model.Members.Any())
                        {
                            foreach (var u in Model.Members.OrderBy(m => m.LastName))
                            {
                                if (!membersOnAssignment.Contains(u.Id))
                                {
                                    using (Html.BeginForm("AssignMemberToPeriod", "Study", FormMethod.Post, new {@class = "hidden", id = u.Id}))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("mid", u.Id)
                                        @Html.Hidden("pid", Model.StudyPeriod.Id)
                                        @Html.Hidden("amount", Model.DefaultHourAmount, new {id = u.Id + "-a"})
                                    }
                                    <button type="button" class="list-group-item"
                                            onclick="$('#@(u.Id)-a').val($('#hours').val()); $('#@(u.Id)').submit();">
                                        @u.ToString()
                                        <i class="fa fa-plus-square text-success pull-right"></i>
                                    </button>
                                }
                            }
                        }
                        else
                        {
                            <div class="list-group-item list-group-item-warning">
                                No members were found in the system.
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

