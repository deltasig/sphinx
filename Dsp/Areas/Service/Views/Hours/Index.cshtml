@model Dsp.Areas.Service.Models.ServiceHourIndexModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Service Hours";

    ViewBag.Subtitle = Model.Semester;

    var totalMembers = Model.ServiceHours.Count();
    var actives = Model.ServiceHours.Where(m => m.Member.PledgeClass.SemesterId != Model.Semester.SemesterId).ToList();
    var pledges = Model.ServiceHours.Where(m => m.Member.PledgeClass.SemesterId == Model.Semester.SemesterId).ToList();

    var membersServed = Model.ServiceHours.Count(m => m.Hours > 0);
    var membersServedPercentage = (int)(100 * (membersServed / (double)totalMembers));
    var membersServedTen = Model.ServiceHours.Count(m => m.Hours >= 10);
    var servedTenPercentage = (int)(100 * (membersServedTen / (double)totalMembers));
    var membersServedFifteen = Model.ServiceHours.Count(m => m.Hours >= 15);
    var servedFifteenPercentage = (int)(100 * (membersServedFifteen / (double)totalMembers));
    var totalMemberHours = Model.ServiceHours.Sum(m => m.Hours);
    var averageMemberHours = (totalMemberHours / totalMembers).ToString("F1");

    var activesServed = actives.Count(m => m.Hours > 0);
    var activesServedPercentage = (int)(100 * (activesServed / (double)(actives.Count == 0 ? 1 : actives.Count)));
    var activesServedTen = actives.Count(m => m.Hours >= 10);
    var activesTenPercentage = (int)(100 * (activesServedTen / (double)(actives.Count == 0 ? 1 : actives.Count)));
    var activesServedFifteen = actives.Count(m => m.Hours >= 15);
    var activesFifteenPercentage = (int)(100 * (activesServedFifteen / (double)(actives.Count == 0 ? 1 : actives.Count)));
    var totalActiveHours = actives.Sum(m => m.Hours);
    var averageActiveHours = (totalActiveHours / (actives.Count == 0 ? 1 : actives.Count)).ToString("F1");

    var pledgesServed = pledges.Count(m => m.Hours > 0);
    var pledgesServedPercentage = (int)(100 * (pledgesServed / (double)(pledges.Count == 0 ? 1 : pledges.Count)));
    var pledgesServedTen = pledges.Count(m => m.Hours >= 10);
    var pledgesTenPercentage = (int)(100 * (pledgesServedTen / (double)(pledges.Count == 0 ? 1 : pledges.Count)));
    var pledgesServedFifteen = pledges.Count(m => m.Hours >= 15);
    var pledgesFifteenPercentage = (int)(100 * (pledgesServedFifteen / (double)(pledges.Count == 0 ? 1 : pledges.Count)));
    var totalPledgeHours = pledges.Sum(m => m.Hours);
    var averagePledgeHours = (totalPledgeHours / (pledges.Count == 0 ? 1 : pledges.Count)).ToString("F1");
}

<div class="container-fluid">
    <div class="row">
        <div class="col-xs-6">
            <div class="dropdown">
                <button class="btn btn-default dropdown-toggle" type="button" id="semester-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    Change Semester
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="semester-dropdown">
                    @foreach (var s in Model.SemesterList)
                    {
                        <li><a href="@Url.Action("Index", new { s = s.Value })">@s.Text</a></li>
                    }
                </ul>
            </div>
        </div>
        <div class="col-xs-6 text-right">
            <p>
                <a href="@Url.Action("Index", "Events", new { s = Model.Semester.SemesterId })" class="btn btn-sm btn-default">
                    Service Events
                </a>
                @Html.ActionLink("Submit Hours", "Submit", new { s = Model.Semester.SemesterId }, new { @class = "btn btn-sm btn-success" })
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Quick Stats
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>All Members (@totalMembers)</th>
                            <th>Actives (@actives.Count())</th>
                            <th>Pledges (@pledges.Count())</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Total hours:</td>
                            <td>@totalMemberHours</td>
                            <td>@actives.Sum(a => a.Hours)</td>
                            <td>@pledges.Sum(p => p.Hours)</td>
                        </tr>
                        <tr>
                            <td>Members served &gt; 0 hours:</td>
                            <td>@membersServed (@membersServedPercentage %)</td>
                            <td>@activesServed (@activesServedPercentage %)</td>
                            <td>@pledgesServed (@pledgesServedPercentage %)</td>
                        </tr>
                        <tr>
                            <td>Members served &ge; 10 hours:</td>
                            <td>@membersServedTen (@servedTenPercentage %)</td>
                            <td>@activesServedTen (@activesTenPercentage %)</td>
                            <td>@pledgesServedTen (@pledgesTenPercentage %)</td>
                        </tr>
                        <tr>
                            <td>Members served &ge; 15 hours:</td>
                            <td>@membersServedFifteen (@servedFifteenPercentage %)</td>
                            <td>@activesServedFifteen (@activesFifteenPercentage %)</td>
                            <td>@pledgesServedFifteen (@pledgesFifteenPercentage %)</td>
                        </tr>
                        <tr>
                            <td>Service Hours Per Member:</td>
                            <td>@averageMemberHours</td>
                            <td>@averageActiveHours</td>
                            <td>@averagePledgeHours</td>
                        </tr>
                    </tbody>
                </table>
                <div class="panel-footer">
                    <strong>Reminder: </strong> Sober driving is not counted towards community service hours.
                </div>
            </div>

        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default">
                <div class="table-responsive">
                    <table class="table table-condensed table-hover">
                        <thead>
                        <tr class="active">
                            <th class="">Name</th>
                            <th class="col-md-2">Progress</th>
                            <th class="col-md-3">Hours</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in Model.ServiceHours.OrderBy(o => o.Member.LastName))
                        {
                            var goal = (double) Model.Semester.MinimumServiceHours;
                            var percentage = (item.Hours/goal)*100.0;
                            var barColor = percentage < 25 ? "danger" : percentage >= 100 ? "success" : "warning";


                            <tr type="button" data-toggle="collapse" data-target=".@item.Member.Id"
                                aria-expanded="false" aria-controls="@item.Member.Id">
                                <td>
                                    @item.Member.LastName, @item.Member.FirstName
                                </td>
                                <td>
                                    <div class="progress" style="margin: 0">
                                        <div class="progress-bar  progress-bar-striped progress-bar-@barColor" role="progressbar"
                                             aria-valuenow="@(item.Hours)" aria-valuemin="0"
                                             aria-valuemax="@(goal)" style="width: @(percentage > 100 ? 100 : percentage)%;">
                                            @percentage%
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @item.Hours
                                    <button class="btn btn-xs pull-right" type="button">Details</button>
                                </td>
                            </tr>
                            foreach (var s in item.ServiceHours)
                            {
                                <tr class="collapse @item.Member.Id active">
                                    <td style="border: none" colspan="2">
                                        @Html.ActionLink(s.Event.EventName, "Details", "Events", new {id = s.Event.EventId}, null)
                                    </td>
                                    <td style="border: none">
                                        @s.DurationHours
                                        @if (User.IsInRole("Administrator") || User.IsInRole("Service"))
                                        {
                                            <div class="pull-right text-right">
                                                @Html.ActionLink("Edit", "Edit", new {eid = s.EventId, uid = s.UserId}) |
                                                @Html.ActionLink("Delete", "Delete", new {eid = s.EventId, uid = s.UserId})
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                    <div class="panel-footer">Member Count: @Model.ServiceHours.Count</div>
                </div>
            </div>
        </div>
    </div>
</div>
